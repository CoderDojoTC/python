{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"this is the docs/index.md file CoderDojo Twin Cities Python Resources This GitHub repository is for sharing resources to teach Python. We have used two different envornments for teaching Python: Trinket.io and Jypyter Notebooks. Each has its strengths and weaknesses. Trinket We use the trinket.io web site to teach introduction to python. Trinket has a nice turtle graphics library which is ideal for fast visual feedback. Jupyter Notebook You can also use Jupyter Notebooks to draw turtle graphics. The notebook will open a new window to draw your turtle graphis. Getting Jupyter Notebooks is a bit tricky to setup on many PCs. However, once it is setup it offers tens of thousands of sample programs to learn python coding. Jupyter Notebooks are also the preferred tool by many data science professionals. An example of a Jupyter Notebook that uses turtle graphs is here Target Audience Students that have good keyboarding skills and are new to Python. Note: Students must have an Internet/web connection to use these labs. List of Concepts Here are some of the concepts we will be learning in this course. If you are already familiar with these concepts you can skip over some of the labs. importing libraries We need to tell Pyhton what functions we want to use. We will use the import function to tell Python which functions we need to use in our programs. drawing Turtle graphs has a set of drawing functions. We will learn to use these to draw patterns on the screen. square walk - teach your turtle to walk in a square and draw figures. variables Variables make our programs easier to read and easier to understand. loops Loops help use when we have many tasks that we repeat over and over. conditionals Conditionals allow us to change our behavior based on rules we create. functions Functions allow us to break large programs into chunks that we can give names and can call over and over. function parameters Functions can also take parameters to change the behavior of a function. random numbers Random number functions allow our programs to have the computer select new random number between a range of numbers. lists Lists alow us to create collections of names. inputs Inputs allow us to prompt the user for values. recursion Recursion allows us to have programs call themselves to create repeating patterns. Contributing to Our Library Do you have a specific example you would like to share with other students and teachers? Please see the Contributing menu for details on how to share your code.","title":"Home"},{"location":"#coderdojo-twin-cities-python-resources","text":"This GitHub repository is for sharing resources to teach Python. We have used two different envornments for teaching Python: Trinket.io and Jypyter Notebooks. Each has its strengths and weaknesses.","title":"CoderDojo Twin Cities Python Resources"},{"location":"#trinket","text":"We use the trinket.io web site to teach introduction to python. Trinket has a nice turtle graphics library which is ideal for fast visual feedback.","title":"Trinket"},{"location":"#jupyter-notebook","text":"You can also use Jupyter Notebooks to draw turtle graphics. The notebook will open a new window to draw your turtle graphis. Getting Jupyter Notebooks is a bit tricky to setup on many PCs. However, once it is setup it offers tens of thousands of sample programs to learn python coding. Jupyter Notebooks are also the preferred tool by many data science professionals. An example of a Jupyter Notebook that uses turtle graphs is here","title":"Jupyter Notebook"},{"location":"#target-audience","text":"Students that have good keyboarding skills and are new to Python. Note: Students must have an Internet/web connection to use these labs.","title":"Target Audience"},{"location":"#list-of-concepts","text":"Here are some of the concepts we will be learning in this course. If you are already familiar with these concepts you can skip over some of the labs. importing libraries We need to tell Pyhton what functions we want to use. We will use the import function to tell Python which functions we need to use in our programs. drawing Turtle graphs has a set of drawing functions. We will learn to use these to draw patterns on the screen. square walk - teach your turtle to walk in a square and draw figures. variables Variables make our programs easier to read and easier to understand. loops Loops help use when we have many tasks that we repeat over and over. conditionals Conditionals allow us to change our behavior based on rules we create. functions Functions allow us to break large programs into chunks that we can give names and can call over and over. function parameters Functions can also take parameters to change the behavior of a function. random numbers Random number functions allow our programs to have the computer select new random number between a range of numbers. lists Lists alow us to create collections of names. inputs Inputs allow us to prompt the user for values. recursion Recursion allows us to have programs call themselves to create repeating patterns.","title":"List of Concepts"},{"location":"#contributing-to-our-library","text":"Do you have a specific example you would like to share with other students and teachers? Please see the Contributing menu for details on how to share your code.","title":"Contributing to Our Library"},{"location":"contact/","text":"Contacts General Code Savvy Contact kidscode@codesavvy.org Specific questions on this repository Dan McCreary Dan.McCreary@gmail.com","title":"Contact"},{"location":"contact/#contacts","text":"","title":"Contacts"},{"location":"contact/#general-code-savvy-contact","text":"kidscode@codesavvy.org","title":"General Code Savvy Contact"},{"location":"contact/#specific-questions-on-this-repository","text":"Dan McCreary Dan.McCreary@gmail.com","title":"Specific questions on this repository"},{"location":"contribute/","text":"How to Contribute to Our Learning Python Library We are an all-volunteer organization. So we don't yet have any paid staff to curate new content. However, we do value your input and will consider all contributions as our volunteer time permits. We especially value teachers that would like to integrate coding, data science and AI into your classrooms in new and innovative ways. Using Standard Git Pull Requests The best way to contribute is to send use your sample programs using a standard GitHub pull request method. This allow us to view all the changes you are proposing and give you feedback. This is a three step process. 1. The first step will require you to have your own github account. You can go to our github home page and look for the \"fork\" icon. When you click that it will make a \"virutal copy\" in your own github area. 2. You can then add your content to that repository and do all the testing there. 3. Once you have everything tested you can click the \"Submit Pull Request\". This process will notify our team your additon is pending. We will review these new submission and if everything looks OK we will accept your changes. We might suggest a few changes the first time you send us a pull request. Don't take this personally. We want to make working on-line togeher as semaless as possible and helping put the right sections in place to start is a normal part of working in teams on line. Good Lesson Plans A good contribution has some, but not necessarily all of the following: Context - where does this lession fit into our overall cirriculum? Would it normally follow after an existing lession or is it a standalone lesson? Concepts - what concept will be taught in this lesson. We try to keep to the idea of \"One concept per lesson\". So think about what is the minimum amount of code to learn a new concept. Learning Objective - what are the goals of this lession. These are typically written as \"After this lesson the student...: Difficulty Level - is it a Beginner, Intermediate or Difficult concept? For example drawing a square with a turtle is a Beginner concept. Recursion is a Difficult concept. Sample Code - Please provide working sample code that you have tested whenever possible. We encourage you to put in in-line comments when possible. Experiments - What additional experiments could the students do? Could they intergrate other prior concepts? Using Markdown formats We strongly suggest you submit your contributions using Markdown format. There are tools that will convert MS-Word into Markdown format.","title":"How to Contribute Examples"},{"location":"contribute/#how-to-contribute-to-our-learning-python-library","text":"We are an all-volunteer organization. So we don't yet have any paid staff to curate new content. However, we do value your input and will consider all contributions as our volunteer time permits. We especially value teachers that would like to integrate coding, data science and AI into your classrooms in new and innovative ways.","title":"How to Contribute to Our Learning Python Library"},{"location":"contribute/#using-standard-git-pull-requests","text":"The best way to contribute is to send use your sample programs using a standard GitHub pull request method. This allow us to view all the changes you are proposing and give you feedback. This is a three step process. 1. The first step will require you to have your own github account. You can go to our github home page and look for the \"fork\" icon. When you click that it will make a \"virutal copy\" in your own github area. 2. You can then add your content to that repository and do all the testing there. 3. Once you have everything tested you can click the \"Submit Pull Request\". This process will notify our team your additon is pending. We will review these new submission and if everything looks OK we will accept your changes. We might suggest a few changes the first time you send us a pull request. Don't take this personally. We want to make working on-line togeher as semaless as possible and helping put the right sections in place to start is a normal part of working in teams on line.","title":"Using Standard Git Pull Requests"},{"location":"contribute/#good-lesson-plans","text":"A good contribution has some, but not necessarily all of the following: Context - where does this lession fit into our overall cirriculum? Would it normally follow after an existing lession or is it a standalone lesson? Concepts - what concept will be taught in this lesson. We try to keep to the idea of \"One concept per lesson\". So think about what is the minimum amount of code to learn a new concept. Learning Objective - what are the goals of this lession. These are typically written as \"After this lesson the student...: Difficulty Level - is it a Beginner, Intermediate or Difficult concept? For example drawing a square with a turtle is a Beginner concept. Recursion is a Difficult concept. Sample Code - Please provide working sample code that you have tested whenever possible. We encourage you to put in in-line comments when possible. Experiments - What additional experiments could the students do? Could they intergrate other prior concepts?","title":"Good Lesson Plans"},{"location":"contribute/#using-markdown-formats","text":"We strongly suggest you submit your contributions using Markdown format. There are tools that will convert MS-Word into Markdown format.","title":"Using Markdown formats"},{"location":"jupyter/01-setup/","text":"We will be using the turtle library in Python 3.3 Python 3.6 Turtle Library Jupyter Notebook Setup We will be running this library from within a Jypyter notebook. Steps Install conda Create a new conda environment Install Jupyter Start up Jupyter Test Turtle Install Conda Google \"install python\" on your operating system. Google \"install conda\" Create a new conda envornment: Open your terminal. Type in the following commands. conda env list conda create - n turtle python = 3.6 conda activate turtle juypter notebook After you run the last command it will open a web browser. References Conda Documentation","title":"01 setup"},{"location":"jupyter/01-setup/#jupyter-notebook-setup","text":"We will be running this library from within a Jypyter notebook.","title":"Jupyter Notebook Setup"},{"location":"jupyter/01-setup/#steps","text":"Install conda Create a new conda environment Install Jupyter Start up Jupyter Test Turtle","title":"Steps"},{"location":"jupyter/01-setup/#install-conda","text":"Google \"install python\" on your operating system. Google \"install conda\"","title":"Install Conda"},{"location":"jupyter/01-setup/#create-a-new-conda-envornment","text":"Open your terminal. Type in the following commands. conda env list conda create - n turtle python = 3.6 conda activate turtle juypter notebook After you run the last command it will open a web browser.","title":"Create a new conda envornment:"},{"location":"jupyter/01-setup/#references","text":"Conda Documentation","title":"References"},{"location":"jupyter/02-draw-figure/","text":"Draw Figure Turtle Lab in Jupyter In this lab we setup a new Jupyter notebook that will do turtle graphics. Link to Jypyter Notebook Draw Figure Jypyter Notebook","title":"02 draw figure"},{"location":"jupyter/02-draw-figure/#draw-figure-turtle-lab-in-jupyter","text":"In this lab we setup a new Jupyter notebook that will do turtle graphics.","title":"Draw Figure Turtle Lab in Jupyter"},{"location":"jupyter/02-draw-figure/#link-to-jypyter-notebook","text":"Draw Figure Jypyter Notebook","title":"Link to Jypyter Notebook"},{"location":"jupyter/02-setup-canvas/","text":"We will be using python canvas drawing library. Unlike turtle graphics the canvas library has many powerful drawing tools. Python IPYCanvas Library Jupyter Lab We will be running this library from within a Jypyter lab. Steps Install conda Create a new conda environment Install Jupyter lab Start up Jupyter Test Canvas Setup With Conda conda env list conda create - n turtle python = 3.6 conda activate turtle juypter lab After you run the last command it will open a web browser. References Conda Documentation","title":"02 setup canvas"},{"location":"jupyter/02-setup-canvas/#jupyter-lab","text":"We will be running this library from within a Jypyter lab.","title":"Jupyter Lab"},{"location":"jupyter/02-setup-canvas/#steps","text":"Install conda Create a new conda environment Install Jupyter lab Start up Jupyter Test Canvas","title":"Steps"},{"location":"jupyter/02-setup-canvas/#setup-with-conda","text":"conda env list conda create - n turtle python = 3.6 conda activate turtle juypter lab After you run the last command it will open a web browser.","title":"Setup With Conda"},{"location":"jupyter/02-setup-canvas/#references","text":"Conda Documentation","title":"References"},{"location":"jupyter/20-canvas-color-bars/","text":"Canvas Color Bars We can draw directly into the Jupyter Lab canvas by using the Canvas drawing component. The following draws several horizontal bars of different color. from ipycanvas import Canvas canvas = Canvas ( width = 400 , height = 170 ) # draw a some lines of different colors and widths canvas . translate ( 10 , 10 ) canvas . fill_style = 'red' ; canvas . fill_rect ( 0 , 0 , 400 , 10 ) canvas . fill_style = 'orange' ; canvas . fill_rect ( 0 , 25 , 400 , 10 ) canvas . fill_style = 'yellow' ; canvas . fill_rect ( 0 , 50 , 400 , 10 ) canvas . fill_style = 'green' ; canvas . fill_rect ( 0 , 75 , 400 , 10 ) canvas . fill_style = 'blue' ; canvas . fill_rect ( 0 , 100 , 400 , 10 ) canvas . fill_style = 'purple' ; canvas . fill_rect ( 0 , 125 , 400 , 10 ) canvas . fill_style = 'pink' ; canvas . fill_rect ( 0 , 150 , 400 , 10 ) canvas Experiments Can you modify the above to use a list of colors and a for loop? The color list might be: Using Lists from ipycanvas import Canvas canvas = Canvas ( width = 400 , height = 250 ) colors = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'purple' , 'brown' , 'cyan' , 'lightgreen' , 'lightblue' ] canvas . font = '16px serif' # draw some boxes of different colors canvas . translate ( 10 , 10 ) for i in range ( len ( colors )): canvas . fill_style = colors [ i ]; canvas . fill_text ( colors [ i ], 0 , 25 * i + 10 ) canvas . fill_rect ( 70 , i * 25 , 400 , 15 ) canvas","title":"20 canvas color bars"},{"location":"jupyter/20-canvas-color-bars/#canvas-color-bars","text":"We can draw directly into the Jupyter Lab canvas by using the Canvas drawing component. The following draws several horizontal bars of different color. from ipycanvas import Canvas canvas = Canvas ( width = 400 , height = 170 ) # draw a some lines of different colors and widths canvas . translate ( 10 , 10 ) canvas . fill_style = 'red' ; canvas . fill_rect ( 0 , 0 , 400 , 10 ) canvas . fill_style = 'orange' ; canvas . fill_rect ( 0 , 25 , 400 , 10 ) canvas . fill_style = 'yellow' ; canvas . fill_rect ( 0 , 50 , 400 , 10 ) canvas . fill_style = 'green' ; canvas . fill_rect ( 0 , 75 , 400 , 10 ) canvas . fill_style = 'blue' ; canvas . fill_rect ( 0 , 100 , 400 , 10 ) canvas . fill_style = 'purple' ; canvas . fill_rect ( 0 , 125 , 400 , 10 ) canvas . fill_style = 'pink' ; canvas . fill_rect ( 0 , 150 , 400 , 10 ) canvas","title":"Canvas Color Bars"},{"location":"jupyter/20-canvas-color-bars/#experiments","text":"Can you modify the above to use a list of colors and a for loop? The color list might be:","title":"Experiments"},{"location":"jupyter/20-canvas-color-bars/#using-lists","text":"from ipycanvas import Canvas canvas = Canvas ( width = 400 , height = 250 ) colors = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'purple' , 'brown' , 'cyan' , 'lightgreen' , 'lightblue' ] canvas . font = '16px serif' # draw some boxes of different colors canvas . translate ( 10 , 10 ) for i in range ( len ( colors )): canvas . fill_style = colors [ i ]; canvas . fill_text ( colors [ i ], 0 , 25 * i + 10 ) canvas . fill_rect ( 70 , i * 25 , 400 , 15 ) canvas","title":"Using Lists"},{"location":"trinket/00-introduction/","text":"Introduction to Turtle Graphics with Trinket These labs assume that you have internet access and a modern web browser such as Chrome. We use the Trinket web site because it has many of the basic turtle drawing libraries implemented in and easy-to-use web envornment. It is apropriate for students just getting started with python programming but has limited libraries for our advanced data analysis and plotting labs. List of Trinket Python Labs Our labs are working sample programs that you can try. You can learn by reading the sample programs and changing some values in the code. Each of the labs has experiments you can do to extend the code in various ways. turtle graphics simple square variables loops conditionals functions function parameters TODO random lists TODO inputs TODO recursion TODO","title":"00 introduction"},{"location":"trinket/00-introduction/#introduction-to-turtle-graphics-with-trinket","text":"These labs assume that you have internet access and a modern web browser such as Chrome. We use the Trinket web site because it has many of the basic turtle drawing libraries implemented in and easy-to-use web envornment. It is apropriate for students just getting started with python programming but has limited libraries for our advanced data analysis and plotting labs.","title":"Introduction to Turtle Graphics with Trinket"},{"location":"trinket/00-introduction/#list-of-trinket-python-labs","text":"Our labs are working sample programs that you can try. You can learn by reading the sample programs and changing some values in the code. Each of the labs has experiments you can do to extend the code in various ways. turtle graphics simple square variables loops conditionals functions function parameters TODO random lists TODO inputs TODO recursion TODO","title":"List of Trinket Python Labs"},{"location":"trinket/01-turtle-graphics/","text":"Turtle Graphics Turtle graphs have been around for almost 50 years . A turtle is a drawing object that has position, direction and a pen to draw as it moves around a grid. They are a great way to teach students about the concepts of programming. Initializaton commands There are three lines that will appear at the top of these labs: import turtle t = turtle . Turtle () t . shape ( 'turtle' ) The first line loads the turtle library into our program. The second creates a new turtle object called \"t\". The third line sets the shape to be a turtle. You don't have to use the name \"t\". You can set your turtle's name to be whatever you want. For example you can call your turtle \"sue\". import turtle sue = turtle . Turtle () sue . shape ( 'turtle' ) Just make sure you change all the names in the file to reference your new name. Moving the Turtle There a five basic ways to move your turtle around the screen. Our screen is approximatly 300 points wide and 400 points high. The point (0,0) is at the center of our screen. The first four are relative commands. The last one will move the turtle to the absolute x and y location. t.forward(40) t.back(40) t.left(90) t.right(90) t.goto(x,y) Drawing There are several ways to draw virtual \"ink\" on the screen. The most common way is to just move your turtle around. It will draw a thin black line by default. t.penup() t.pendown() t.color('red') t.pensize(5) t.begin_fill() - begin filling a region you draw around t.end_fill() - end the fill region Shapes There are also a few built-in drawing functions. - t.circle(10) Misc There are also a few other miscellanious things you can do. You can do some drawing and then clear the screen. t.clear() You can see a full list of the turtle commands here . Just click on the turtle area and scroll down. In addition to these drawing commands some of the exercises use random numbers. import random # get a random number between -200 and 200 myNumber = random . randint ( - 200 , 200 )","title":"01 turtle graphics"},{"location":"trinket/01-turtle-graphics/#turtle-graphics","text":"Turtle graphs have been around for almost 50 years . A turtle is a drawing object that has position, direction and a pen to draw as it moves around a grid. They are a great way to teach students about the concepts of programming.","title":"Turtle Graphics"},{"location":"trinket/01-turtle-graphics/#initializaton-commands","text":"There are three lines that will appear at the top of these labs: import turtle t = turtle . Turtle () t . shape ( 'turtle' ) The first line loads the turtle library into our program. The second creates a new turtle object called \"t\". The third line sets the shape to be a turtle. You don't have to use the name \"t\". You can set your turtle's name to be whatever you want. For example you can call your turtle \"sue\". import turtle sue = turtle . Turtle () sue . shape ( 'turtle' ) Just make sure you change all the names in the file to reference your new name.","title":"Initializaton commands"},{"location":"trinket/01-turtle-graphics/#moving-the-turtle","text":"There a five basic ways to move your turtle around the screen. Our screen is approximatly 300 points wide and 400 points high. The point (0,0) is at the center of our screen. The first four are relative commands. The last one will move the turtle to the absolute x and y location. t.forward(40) t.back(40) t.left(90) t.right(90) t.goto(x,y)","title":"Moving the Turtle"},{"location":"trinket/01-turtle-graphics/#drawing","text":"There are several ways to draw virtual \"ink\" on the screen. The most common way is to just move your turtle around. It will draw a thin black line by default. t.penup() t.pendown() t.color('red') t.pensize(5) t.begin_fill() - begin filling a region you draw around t.end_fill() - end the fill region","title":"Drawing"},{"location":"trinket/01-turtle-graphics/#shapes","text":"There are also a few built-in drawing functions. - t.circle(10)","title":"Shapes"},{"location":"trinket/01-turtle-graphics/#misc","text":"There are also a few other miscellanious things you can do. You can do some drawing and then clear the screen. t.clear() You can see a full list of the turtle commands here . Just click on the turtle area and scroll down. In addition to these drawing commands some of the exercises use random numbers. import random # get a random number between -200 and 200 myNumber = random . randint ( - 200 , 200 )","title":"Misc"},{"location":"trinket/02-simple-square/","text":"Drawing a Square The following code is an example of drawing a square using turtle graphics. In this example the turtle moves foward 100 units and then turns right. The angle for the right turn is 90 degrees. It repeats these two functions four times to make a square. Sample Code import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) dan . forward ( 100 ) dan . right ( 90 ) dan . forward ( 100 ) dan . right ( 90 ) dan . forward ( 100 ) dan . right ( 90 ) dan . forward ( 100 ) dan . right ( 90 ) Drawing Explaination The first three lines will be the same for all our programs. They import the turtle library into our program, create a new turtle object and then assign the turtle a shape icon. Note that at the start, the turtle is facing to the right. After the last instruction, it is also facing to the right. Experiments Can you change the distance and angle the turtle moves? What happens when you change the numbers for the forward and right functions? Can you go left as well as right? Can you add more motion commands using copy and paste?","title":"02 simple square"},{"location":"trinket/02-simple-square/#drawing-a-square","text":"The following code is an example of drawing a square using turtle graphics. In this example the turtle moves foward 100 units and then turns right. The angle for the right turn is 90 degrees. It repeats these two functions four times to make a square.","title":"Drawing a Square"},{"location":"trinket/02-simple-square/#sample-code","text":"import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) dan . forward ( 100 ) dan . right ( 90 ) dan . forward ( 100 ) dan . right ( 90 ) dan . forward ( 100 ) dan . right ( 90 ) dan . forward ( 100 ) dan . right ( 90 )","title":"Sample Code"},{"location":"trinket/02-simple-square/#drawing","text":"","title":"Drawing"},{"location":"trinket/02-simple-square/#explaination","text":"The first three lines will be the same for all our programs. They import the turtle library into our program, create a new turtle object and then assign the turtle a shape icon. Note that at the start, the turtle is facing to the right. After the last instruction, it is also facing to the right.","title":"Explaination"},{"location":"trinket/02-simple-square/#experiments","text":"Can you change the distance and angle the turtle moves? What happens when you change the numbers for the forward and right functions? Can you go left as well as right? Can you add more motion commands using copy and paste?","title":"Experiments"},{"location":"trinket/03-variables/","text":"Using Variables In the simple square program we repeated the numbers for the distance and turning angle four times in four different places. If we wanted to change the size of our box we would have to change the code in four different places. By using variables we can make our program easier to change. In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square. Sample Code import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) # let's just put these in one place to make our program easier to modify distance = 50 angle = 90 dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Run Square With Variables Experiments Can you make the turtle draw a larger square? Hint: change the forward(40) to be forward(100)","title":"03 variables"},{"location":"trinket/03-variables/#using-variables","text":"In the simple square program we repeated the numbers for the distance and turning angle four times in four different places. If we wanted to change the size of our box we would have to change the code in four different places. By using variables we can make our program easier to change. In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square.","title":"Using Variables"},{"location":"trinket/03-variables/#sample-code","text":"import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) # let's just put these in one place to make our program easier to modify distance = 50 angle = 90 dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Run Square With Variables","title":"Sample Code"},{"location":"trinket/03-variables/#experiments","text":"Can you make the turtle draw a larger square? Hint: change the forward(40) to be forward(100)","title":"Experiments"},{"location":"trinket/04-loops/","text":"Using a Loop In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square. Sample Code import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # repeat the forward/right functions four times for i in range ( 4 ): dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Running the Demo Run Square With Loop Experiments Can you make the turtle draw a larger square? Hint: change the distnace to be 80. How big can you make the square before the turtle goes off the screen?","title":"04 loops"},{"location":"trinket/04-loops/#using-a-loop","text":"In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square.","title":"Using a Loop"},{"location":"trinket/04-loops/#sample-code","text":"import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # repeat the forward/right functions four times for i in range ( 4 ): dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' )","title":"Sample Code"},{"location":"trinket/04-loops/#running-the-demo","text":"Run Square With Loop","title":"Running the Demo"},{"location":"trinket/04-loops/#experiments","text":"Can you make the turtle draw a larger square? Hint: change the distnace to be 80. How big can you make the square before the turtle goes off the screen?","title":"Experiments"},{"location":"trinket/05-conditionals/","text":"Conditionals In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square. import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # repeat the forward/right functions four times for i in range ( 4 ): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Conditinal Sqare Can you make the turtle use a larger pen size? Try dan.pensize(10) for the red and dan.pensize(3) for the blue. Experiments Can you change the width of the pen with the dan.penwidth(20) function?","title":"05 conditionals"},{"location":"trinket/05-conditionals/#conditionals","text":"In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square. import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # repeat the forward/right functions four times for i in range ( 4 ): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Conditinal Sqare Can you make the turtle use a larger pen size? Try dan.pensize(10) for the red and dan.pensize(3) for the blue.","title":"Conditionals"},{"location":"trinket/05-conditionals/#experiments","text":"Can you change the width of the pen with the dan.penwidth(20) function?","title":"Experiments"},{"location":"trinket/06-functions/","text":"Functions Now we will create a new function that will draw each side. Sample Code import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 def side (): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . forward ( distance ) dan . right ( angle ) # repeat the forward/right functions four times for i in range ( 4 ): side () dan . write ( 'done with square' ) Function Experiments Can you change the name of the function to be \"petal\"?","title":"06 functions"},{"location":"trinket/06-functions/#functions","text":"Now we will create a new function that will draw each side.","title":"Functions"},{"location":"trinket/06-functions/#sample-code","text":"import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 def side (): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . forward ( distance ) dan . right ( angle ) # repeat the forward/right functions four times for i in range ( 4 ): side () dan . write ( 'done with square' ) Function","title":"Sample Code"},{"location":"trinket/06-functions/#experiments","text":"Can you change the name of the function to be \"petal\"?","title":"Experiments"},{"location":"trinket/07-flower/","text":"Flower Now we will create a new function that will draw a triangle for each side. It will do this by going forward and right three times at an angle of 120 degrees. Sample Code import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 100 angle = 120 def petal (): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . left ( 30 ) # draw a triangle and fill in the color dan . begin_fill () dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . end_fill () dan . left ( angle ) # repeat the forward/right functions four times for i in range ( 4 ): petal () dan . write ( 'done with flower' ) Function Experiments Can you change the name of the function to be \"petal\"?","title":"07 flower"},{"location":"trinket/07-flower/#flower","text":"Now we will create a new function that will draw a triangle for each side. It will do this by going forward and right three times at an angle of 120 degrees.","title":"Flower"},{"location":"trinket/07-flower/#sample-code","text":"import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 100 angle = 120 def petal (): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . left ( 30 ) # draw a triangle and fill in the color dan . begin_fill () dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . end_fill () dan . left ( angle ) # repeat the forward/right functions four times for i in range ( 4 ): petal () dan . write ( 'done with flower' ) Function","title":"Sample Code"},{"location":"trinket/07-flower/#experiments","text":"Can you change the name of the function to be \"petal\"?","title":"Experiments"},{"location":"trinket/07-function-parameters/","text":"Function= Parameters Now we will create a new function that draw a square with a specific color at a specific x and y point. The function will take three inputs: - the color - the horizontal x position on the grid - the vertical y position on the grid Sample Code import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) size = 40 def square ( myColor , x , y ): dan . color ( myColor ) dan . penup () dan . goto ( x , y ) dan . pendown () for i in range ( 4 ): dan . forward ( size ) dan . right ( 90 ) square ( 'red' , - 50 , - 80 ) square ( 'orange' , - 30 , - 70 ) square ( 'green' , 50 , 20 ) square ( 'blue' , 100 , - 90 ) Drawing Function Experiments Can you change the name of the function to be \"petal\"?","title":"07 function parameters"},{"location":"trinket/07-function-parameters/#function-parameters","text":"Now we will create a new function that draw a square with a specific color at a specific x and y point. The function will take three inputs: - the color - the horizontal x position on the grid - the vertical y position on the grid","title":"Function= Parameters"},{"location":"trinket/07-function-parameters/#sample-code","text":"import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) size = 40 def square ( myColor , x , y ): dan . color ( myColor ) dan . penup () dan . goto ( x , y ) dan . pendown () for i in range ( 4 ): dan . forward ( size ) dan . right ( 90 ) square ( 'red' , - 50 , - 80 ) square ( 'orange' , - 30 , - 70 ) square ( 'green' , 50 , 20 ) square ( 'blue' , 100 , - 90 )","title":"Sample Code"},{"location":"trinket/07-function-parameters/#drawing","text":"Function","title":"Drawing"},{"location":"trinket/07-function-parameters/#experiments","text":"Can you change the name of the function to be \"petal\"?","title":"Experiments"},{"location":"trinket/08-random/","text":"Random Circles In this exercise we will draw 10 random circles on the screen. We will use the random function randint(min, max) that will generate a random number between the minimum and maximum values. Since we are drawing on a grid that goes from -200 to 200 here is the random function: myNumber = random.randint(-200, 200) After this line runs, the variable myNumber will be assigned some random number between -200 and 200. We will then use this number to go to that location before we draw a circle. Sample Code import turtle import random dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # draw a circle at a random location on the screen for i in range ( 10 ): x = random . randint ( - 200 , 200 ) y = random . randint ( - 200 , 200 ) dan . goto ( x , y ) # draw a circle dan . circle ( 5 ) dan . goto ( 0 , 0 ) dan . write ( 'done with random' ) Draw 10 circles example on Trinket Experiments Can you change the name of the function to be \"petal\"?","title":"08 random"},{"location":"trinket/08-random/#random-circles","text":"In this exercise we will draw 10 random circles on the screen. We will use the random function randint(min, max) that will generate a random number between the minimum and maximum values. Since we are drawing on a grid that goes from -200 to 200 here is the random function: myNumber = random.randint(-200, 200) After this line runs, the variable myNumber will be assigned some random number between -200 and 200. We will then use this number to go to that location before we draw a circle.","title":"Random Circles"},{"location":"trinket/08-random/#sample-code","text":"import turtle import random dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # draw a circle at a random location on the screen for i in range ( 10 ): x = random . randint ( - 200 , 200 ) y = random . randint ( - 200 , 200 ) dan . goto ( x , y ) # draw a circle dan . circle ( 5 ) dan . goto ( 0 , 0 ) dan . write ( 'done with random' ) Draw 10 circles example on Trinket","title":"Sample Code"},{"location":"trinket/08-random/#experiments","text":"Can you change the name of the function to be \"petal\"?","title":"Experiments"},{"location":"trinket/12-shape-module/","text":"Shape Module In this lab we will create a set of drawing function and put them together into a new file. We will then import this file into our main.py file. Sample Code # This is a custom module we've made. # Modules are files full of code that you can import into your programs. # This one teaches our turtle to draw various shapes. import turtle def draw_circle ( turtle , color , size , x , y ): turtle . penup () turtle . color ( color ) turtle . fillcolor ( color ) turtle . goto ( x , y ) turtle . pendown () turtle . begin_fill () turtle . circle ( size ) turtle . end_fill () def draw_triangle ( turtle , color , size , x , y ): turtle . penup () turtle . color ( color ) turtle . fillcolor ( color ) turtle . goto ( x , y ) turtle . pendown () turtle . begin_fill () for i in range ( 3 ): turtle . forward ( size * 3 ) turtle . left ( 120 ) turtle . end_fill () turtle . setheading ( 0 ) def draw_square ( turtle , color , size , x , y ): turtle . penup () turtle . color ( color ) turtle . fillcolor ( color ) turtle . goto ( x , y ) turtle . pendown () turtle . begin_fill () for i in range ( 4 ): turtle . forward ( size * 2 ) turtle . left ( 90 ) turtle . end_fill () turtle . setheading ( 0 ) def draw_star ( turtle , color , size , x , y ): turtle . penup () turtle . color ( color ) turtle . fillcolor ( color ) turtle . goto ( x , y ) turtle . pendown () turtle . begin_fill () turtle . right ( 144 ) for i in range ( 5 ): turtle . forward ( size * 2 ) turtle . right ( 144 ) turtle . forward ( size * 2 ) turtle . end_fill () turtle . setheading ( 0 ) Sample Program Sample Experiments Can you add a new shape called \"flower\"?","title":"12 shape module"},{"location":"trinket/12-shape-module/#shape-module","text":"In this lab we will create a set of drawing function and put them together into a new file. We will then import this file into our main.py file.","title":"Shape Module"},{"location":"trinket/12-shape-module/#sample-code","text":"# This is a custom module we've made. # Modules are files full of code that you can import into your programs. # This one teaches our turtle to draw various shapes. import turtle def draw_circle ( turtle , color , size , x , y ): turtle . penup () turtle . color ( color ) turtle . fillcolor ( color ) turtle . goto ( x , y ) turtle . pendown () turtle . begin_fill () turtle . circle ( size ) turtle . end_fill () def draw_triangle ( turtle , color , size , x , y ): turtle . penup () turtle . color ( color ) turtle . fillcolor ( color ) turtle . goto ( x , y ) turtle . pendown () turtle . begin_fill () for i in range ( 3 ): turtle . forward ( size * 3 ) turtle . left ( 120 ) turtle . end_fill () turtle . setheading ( 0 ) def draw_square ( turtle , color , size , x , y ): turtle . penup () turtle . color ( color ) turtle . fillcolor ( color ) turtle . goto ( x , y ) turtle . pendown () turtle . begin_fill () for i in range ( 4 ): turtle . forward ( size * 2 ) turtle . left ( 90 ) turtle . end_fill () turtle . setheading ( 0 ) def draw_star ( turtle , color , size , x , y ): turtle . penup () turtle . color ( color ) turtle . fillcolor ( color ) turtle . goto ( x , y ) turtle . pendown () turtle . begin_fill () turtle . right ( 144 ) for i in range ( 5 ): turtle . forward ( size * 2 ) turtle . right ( 144 ) turtle . forward ( size * 2 ) turtle . end_fill () turtle . setheading ( 0 )","title":"Sample Code"},{"location":"trinket/12-shape-module/#sample-program","text":"Sample","title":"Sample Program"},{"location":"trinket/12-shape-module/#experiments","text":"Can you add a new shape called \"flower\"?","title":"Experiments"}]}