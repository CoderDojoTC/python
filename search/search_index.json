{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"this is the docs/index.md file CoderDojo Twin Cities Python Resources \u00b6 This GitHub repository is for sharing resources to teach Python. Trinket \u00b6 We use the trinket.io web site to teach introduction to python. Trinket has a nice turtle graphics library which is ideal for fast visual feedback. Target Audience \u00b6 Students that have good keyboarding skills and are new to Python. Note: Students must have an Internet/web connection to use these labs. Concepts \u00b6 turtle graphics simple square variables loops conditionals functions function parameters lists inputs recursion List of labs \u00b6 [ square walk ] - teach your turtle to walk in a square [ distance variable ] - use a variable to store distance [ loops ] use a for loop to make the turtle go forward and turn four times. We use the [ conditional colors ] Things to try \u00b6 Can you make your turtle draw a triangle? Try having it turn 120 degrees three times","title":"Home"},{"location":"#coderdojo-twin-cities-python-resources","text":"This GitHub repository is for sharing resources to teach Python.","title":"CoderDojo Twin Cities Python Resources"},{"location":"#trinket","text":"We use the trinket.io web site to teach introduction to python. Trinket has a nice turtle graphics library which is ideal for fast visual feedback.","title":"Trinket"},{"location":"#target-audience","text":"Students that have good keyboarding skills and are new to Python. Note: Students must have an Internet/web connection to use these labs.","title":"Target Audience"},{"location":"#concepts","text":"turtle graphics simple square variables loops conditionals functions function parameters lists inputs recursion","title":"Concepts"},{"location":"#list-of-labs","text":"[ square walk ] - teach your turtle to walk in a square [ distance variable ] - use a variable to store distance [ loops ] use a for loop to make the turtle go forward and turn four times. We use the [ conditional colors ]","title":"List of labs"},{"location":"#things-to-try","text":"Can you make your turtle draw a triangle? Try having it turn 120 degrees three times","title":"Things to try"},{"location":"contact/","text":"Contact \u00b6 Dan McCreary Dan.McCreary@optum.com","title":"Contact"},{"location":"contact/#contact","text":"Dan McCreary Dan.McCreary@optum.com","title":"Contact"},{"location":"trinket/01-turtle-graphics/","text":"Turtle =Graphics \u00b6 Turtle graphs have been around for almost 50 years . A turtle is a drawing object that has position, direction and a pen to draw as it moves around a grid. They are a great way to teach students about the concepts of programming. Initialisaton commands \u00b6 import turtle t = turtle.Turtle() t.shape('turtle') Moving the Turtle \u00b6 t.forward(40) t.back(40) t.left(90) t.right(90) t.goto(x,y) Drawing \u00b6 t.penup() t.pendown() t.color('red') t.penwidth(10) Misc \u00b6 t.clear() You can see a full list of the turtle commands here . Just click on the turtle area and scroll down.","title":"01 turtle graphics"},{"location":"trinket/01-turtle-graphics/#turtle-graphics","text":"Turtle graphs have been around for almost 50 years . A turtle is a drawing object that has position, direction and a pen to draw as it moves around a grid. They are a great way to teach students about the concepts of programming.","title":"Turtle =Graphics"},{"location":"trinket/01-turtle-graphics/#initialisaton-commands","text":"import turtle t = turtle.Turtle() t.shape('turtle')","title":"Initialisaton commands"},{"location":"trinket/01-turtle-graphics/#moving-the-turtle","text":"t.forward(40) t.back(40) t.left(90) t.right(90) t.goto(x,y)","title":"Moving the Turtle"},{"location":"trinket/01-turtle-graphics/#drawing","text":"t.penup() t.pendown() t.color('red') t.penwidth(10)","title":"Drawing"},{"location":"trinket/01-turtle-graphics/#misc","text":"t.clear() You can see a full list of the turtle commands here . Just click on the turtle area and scroll down.","title":"Misc"},{"location":"trinket/02-simple-square/","text":"Drawing a Simple Square \u00b6 The following code is an example of drawing a square using turtle graphics. Sample Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) dan . forward ( 40 ) dan . right ( 90 ) dan . forward ( 40 ) dan . right ( 90 ) dan . forward ( 40 ) dan . right ( 90 ) dan . forward ( 40 ) dan . right ( 90 ) dan . write ( 'done with square' ) Explaination \u00b6 The first three lines will be the same for all our programs. They import the turtle library into our program, create a new turtle object and then assign the turtle a shape icon. Experiments \u00b6 Can you change the distance and angle the turtle moves? What happens when you change the numbers for the forward and right functions? Can you add more motion commands using copy and paste?","title":"02 simple square"},{"location":"trinket/02-simple-square/#drawing-a-simple-square","text":"The following code is an example of drawing a square using turtle graphics.","title":"Drawing a Simple Square"},{"location":"trinket/02-simple-square/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) dan . forward ( 40 ) dan . right ( 90 ) dan . forward ( 40 ) dan . right ( 90 ) dan . forward ( 40 ) dan . right ( 90 ) dan . forward ( 40 ) dan . right ( 90 ) dan . write ( 'done with square' )","title":"Sample Code"},{"location":"trinket/02-simple-square/#explaination","text":"The first three lines will be the same for all our programs. They import the turtle library into our program, create a new turtle object and then assign the turtle a shape icon.","title":"Explaination"},{"location":"trinket/02-simple-square/#experiments","text":"Can you change the distance and angle the turtle moves? What happens when you change the numbers for the forward and right functions? Can you add more motion commands using copy and paste?","title":"Experiments"},{"location":"trinket/03-variables/","text":"Using Variables \u00b6 In the simple square program we repeated the numbers for the distance and turning angle four times in four different places. If we wanted to change the size of our box we would have to change the code in four different places. By using variables we can make our program easier to change. In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square. Sample Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) # let's just put these in one place to make our program easier to modify distance = 50 angle = 90 dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Run Square With Variables Experiments \u00b6 Can you make the turtle draw a larger square? Hint: change the forward(40) to be forward(100)","title":"03 variables"},{"location":"trinket/03-variables/#using-variables","text":"In the simple square program we repeated the numbers for the distance and turning angle four times in four different places. If we wanted to change the size of our box we would have to change the code in four different places. By using variables we can make our program easier to change. In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square.","title":"Using Variables"},{"location":"trinket/03-variables/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) # let's just put these in one place to make our program easier to modify distance = 50 angle = 90 dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Run Square With Variables","title":"Sample Code"},{"location":"trinket/03-variables/#experiments","text":"Can you make the turtle draw a larger square? Hint: change the forward(40) to be forward(100)","title":"Experiments"},{"location":"trinket/04-loops/","text":"Using a Loop \u00b6 In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square. Sample Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # repeat the forward/right functions four times for i in range ( 4 ): dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Running the Demo \u00b6 Run Square With Loop Experiments \u00b6 Can you make the turtle draw a larger square? Hint: change the distnace to be 80. How big can you make the square before the turtle goes off the screen?","title":"04 loops"},{"location":"trinket/04-loops/#using-a-loop","text":"In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square.","title":"Using a Loop"},{"location":"trinket/04-loops/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # repeat the forward/right functions four times for i in range ( 4 ): dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' )","title":"Sample Code"},{"location":"trinket/04-loops/#running-the-demo","text":"Run Square With Loop","title":"Running the Demo"},{"location":"trinket/04-loops/#experiments","text":"Can you make the turtle draw a larger square? Hint: change the distnace to be 80. How big can you make the square before the turtle goes off the screen?","title":"Experiments"},{"location":"trinket/05-conditionals/","text":"Conditionals \u00b6 In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # repeat the forward/right functions four times for i in range ( 4 ): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Conditinal Sqare Can you make the turtle use a larger pen size? Try dan.pensize(10) for the red and dan.pensize(3) for the blue. Experiments \u00b6 Can you change the width of the pen with the dan.penwidth(20) function?","title":"05 conditionals"},{"location":"trinket/05-conditionals/#conditionals","text":"In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 # repeat the forward/right functions four times for i in range ( 4 ): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . forward ( distance ) dan . right ( angle ) dan . write ( 'done with square' ) Conditinal Sqare Can you make the turtle use a larger pen size? Try dan.pensize(10) for the red and dan.pensize(3) for the blue.","title":"Conditionals"},{"location":"trinket/05-conditionals/#experiments","text":"Can you change the width of the pen with the dan.penwidth(20) function?","title":"Experiments"},{"location":"trinket/06-functions/","text":"Functions \u00b6 Now we will create a new function that will draw each side. Sample Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 def side (): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . forward ( distance ) dan . right ( angle ) # repeat the forward/right functions four times for i in range ( 4 ): side () dan . write ( 'done with square' ) Function Experiments \u00b6 Can you change the name of the function to be \"petal\"?","title":"06 functions"},{"location":"trinket/06-functions/#functions","text":"Now we will create a new function that will draw each side.","title":"Functions"},{"location":"trinket/06-functions/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 50 angle = 90 def side (): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . forward ( distance ) dan . right ( angle ) # repeat the forward/right functions four times for i in range ( 4 ): side () dan . write ( 'done with square' ) Function","title":"Sample Code"},{"location":"trinket/06-functions/#experiments","text":"Can you change the name of the function to be \"petal\"?","title":"Experiments"},{"location":"trinket/07-flower/","text":"Flower \u00b6 Now we will create a new function that will draw a triangle for each side. It will do this by going forward and right three times at an angle of 120 degrees. Sample Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 100 angle = 120 def petal (): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . left ( 30 ) # draw a triangle and fill in the color dan . begin_fill () dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . end_fill () dan . left ( angle ) # repeat the forward/right functions four times for i in range ( 4 ): petal () dan . write ( 'done with flower' ) Function Experiments \u00b6 Can you change the name of the function to be \"petal\"?","title":"07 flower"},{"location":"trinket/07-flower/#flower","text":"Now we will create a new function that will draw a triangle for each side. It will do this by going forward and right three times at an angle of 120 degrees.","title":"Flower"},{"location":"trinket/07-flower/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import turtle dan = turtle . Turtle () dan . shape ( 'turtle' ) distance = 100 angle = 120 def petal (): if i % 2 : dan . color ( 'red' ) else : dan . color ( 'blue' ) dan . left ( 30 ) # draw a triangle and fill in the color dan . begin_fill () dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . right ( angle ) dan . forward ( distance ) dan . end_fill () dan . left ( angle ) # repeat the forward/right functions four times for i in range ( 4 ): petal () dan . write ( 'done with flower' ) Function","title":"Sample Code"},{"location":"trinket/07-flower/#experiments","text":"Can you change the name of the function to be \"petal\"?","title":"Experiments"}]}