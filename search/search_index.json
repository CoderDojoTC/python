{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CoderDojo Twin Cities Python Resources","text":"<p>This GitHub repository is for sharing teaching resources to teach Python. This includes hints on getting your Python environments setup up and extensive lesson plans for several environments.</p> <p>Our mentors have used several different environments for teaching Python.  They each have pros and cons.  What our mentors like is getting new students started using a graphical programming environment such as turtle graphics libraries.  Here are some of our favorite tools:</p> <ul> <li>Trinket.io is an easy-to use, kid friendly web-based turtle graphics for beginners.</li> <li>Jupyter Notebooks also have some support for turtle graphics.  Jupyter Notebooks can be tricky to setup for the first time, but they are the perfect on-ramp for teaching data literacy.</li> <li>Raspberry Pi - The Raspberry Pi foundation has selected Python as its primary tool for teaching programming.  If you have a Raspberry Pi there are many resources for you.  Trinket and Jupyter Notebooks will also run on many Raspberry Pi devices.</li> <li>Robots Our students love robots.  Python is also the preferred language in many robotics courses.  Today we teach beginning robotics with Scratch and Arduino, but we continue to investigate systems like Raspberry Pi robots that can be programmed with Python.  Let us know if you have any low-cost kid friendly ideas.  We have tested the JetBot and other robots and we continue to look for solutions.</li> </ul> <p>Now let's briefly go into the pros and cons of these systems.</p>"},{"location":"#learning-python-with-trinket","title":"Learning Python with Trinket","text":"<p>We use the trinket.io web site to teach our introduction to python.  Trinket has a nice turtle graphics library which is ideal for fast visual feedback.  Because it is a free and a pure web-based environment it meets the criteria for our courses.  There is no complex setup and each student can continue to do development when they are at home.  The downside of Trinket is it has limited functionality, only supports Python 2.X in the free version and you must have an internet connection to use Trinket.  If you need Python 3.X web version you can use the free repl.id web site.</p>"},{"location":"#learning-python-with-jupyter-notebooks","title":"Learning Python with Jupyter Notebooks","text":"<p>You can also use Jupyter Notebooks to draw turtle graphics.  The notebook will open a new window to draw your turtle graphics.  Getting Jupyter Notebooks is a bit tricky to setup on many PCs.  However, once it is setup it offers tens of thousands of sample programs to learn python coding.  Jupyter Notebooks are also the preferred tool by many data science professionals. An example of a Jupyter Notebook that uses turtle graphs is here</p>"},{"location":"#learning-python-with-raspberry-pi","title":"Learning Python with Raspberry Pi","text":"<p>If you have a Raspberry Pi there are many great ways to learn Python.  One of first things is to try out one of the Python development environments for the Raspberry Pi.</p>"},{"location":"#learning-python-with-robots","title":"Learning Python with Robots","text":"<p>Right now, we are continuing to try to find the right combination of easy-of-use and low-cost robots to teach python.  If you hear of any good tools, please let us know.</p>"},{"location":"#target-audience","title":"Target Audience","text":"<p>Learning Python is ideal for students that have good keyboarding skills.  If students have difficulty with doing functions like copy and pasting text we suggest they start with a block-programming language like Scratch.</p>"},{"location":"#list-of-concepts","title":"List of Concepts","text":"<p>Here are some of the concepts we will be learning in this course.  If you are already familiar with these concepts you can skip over some of the labs.</p> <ul> <li>importing libraries We need to tell Python what functions we want to use.  We will use the import function to tell Python which functions we need to use in our programs.</li> <li>drawing Turtle graphs has a set of drawing functions.  We will learn to use these to draw patterns on the screen.</li> <li>square walk - teach your turtle to walk in a square and draw figures.</li> <li>variables Variables make our programs easier to read and easier to understand.</li> <li>loops Loops help use when we have many tasks that we repeat over and over.</li> <li>conditionals Conditionals allow us to change our behavior based on rules we create.</li> <li>functions  Functions allow us to break large programs into chunks that we can give names and can call over and over.</li> <li>function parameters  Functions can also take parameters to change the behavior of a function.</li> <li>random numbers  Random number functions allow our programs to have the computer select new random number between a range of numbers.</li> <li>lists Lists allow us to create collections of names.</li> <li>inputs  Inputs allow us to prompt the user for values.</li> <li>recursion  Recursion allows us to have programs call themselves to create repeating patterns.</li> <li>modules  Once you have a group of related functions you can put them all together into a module.  This makes it easier for others to reuse your programs.</li> </ul>"},{"location":"#contributing-to-our-library","title":"Contributing to Our Library","text":"<ul> <li>Do you have a specific example you would like to share with other students and teachers?  Please see the Contributing menu for details on how to share your code.</li> </ul>"},{"location":"contact/","title":"Contact","text":""},{"location":"contact/#contacts","title":"Contacts","text":""},{"location":"contact/#general-code-savvy-contact","title":"General Code Savvy Contact","text":"<p>kidscode@codesavvy.org</p>"},{"location":"contact/#specific-questions-on-this-repository","title":"Specific questions on this repository","text":"<p>Dan McCreary Dan.McCreary@gmail.com</p>"},{"location":"contribute/","title":"How to Contribute Examples","text":""},{"location":"contribute/#how-to-contribute-to-our-learning-python-library","title":"How to Contribute to Our Learning Python Library","text":"<p>We are an all-volunteer organization.  So we don't yet have any paid staff to curate new content.  However, we do value your input and will consider all contributions as our volunteer time permits.  We especially value teachers that would like to integrate coding, data science and AI into your classrooms in new and innovative ways.</p>"},{"location":"contribute/#using-standard-git-pull-requests","title":"Using Standard Git Pull Requests","text":"<p>The best way to contribute is to send use your sample programs using a standard GitHub pull request method.  This allow us to view all the changes you are proposing and give you feedback.  This is a three step process. 1. The first step will require you to have your own github account.  You can go to our github home page and look for the \"fork\" icon.  When you click that it will make a \"virutal copy\" in your own github area. 2. You can then add your content to that repository and do all the testing there. 3. Once you have everything tested you can click the \"Submit Pull Request\".  This process will notify our team your additon is pending.  We will review these new submission and if everything looks OK we will accept your changes.  We might suggest a few changes the first time you send us a pull request.  Don't take this personally.  We want to make working on-line togeher as semaless as possible and helping put the right sections in place to start is a normal part of working in teams on line.</p>"},{"location":"contribute/#good-lesson-plans","title":"Good Lesson Plans","text":"<p>A good contribution has some, but not necessarily all of the following:</p> <ol> <li> <p>Context - where does this lession fit into our overall cirriculum?  Would it normally follow after an existing lession or is it a standalone lesson?</p> </li> <li> <p>Concepts - what concept will be taught in this lesson.  We try to keep to the idea of \"One concept per lesson\".  So think about what is the minimum amount of code to learn a new concept.</p> </li> <li> <p>Learning Objective - what are the goals of this lession.  These are typically written as \"After this lesson the student...:</p> </li> <li> <p>Difficulty Level - is it a Beginner, Intermediate or Difficult  concept?  For example drawing a square with a turtle is a Beginner concept.  Recursion is a Difficult concept.</p> </li> <li> <p>Sample Code - Please provide working sample code that you have tested whenever possible.  We encourage you to put in in-line comments when possible.  To use our test highlighter for Python code, please place your code in a block sourrounded by back quotes.  Use the word \"python\" on the like with the first backquotes.  See Examples Here</p> </li> <li> <p>Experiments - What additional experiments could the students do?  Could they intergrate other prior concepts?</p> </li> </ol>"},{"location":"contribute/#using-markdown-formats","title":"Using Markdown formats","text":"<p>We strongly suggest you submit your contributions using Markdown format.  There are tools that will convert MS-Word into Markdown format.  See the Markdown Cheat Sheet for tips to get started with Markdown.</p>"},{"location":"contribute/#converting-ms-word-to-markdown-format","title":"Converting MS-Word to Markdown format","text":"<p>If you have content in Microsoft Word and you use a Windows PC, you can use the Writage plugin to convert your documents.  </p> <p>For Mac users you can use the PanDoc program to convert MS-Word into Markdown.  You will need to open a Terminal to run the following command: <pre><code>$ pandoc -s MyFile.docx -o MyFile.md\n</code></pre></p>"},{"location":"references/","title":"References","text":"<p>University of Western CoderDojo at University of Western Australia - Class of 2016  https://github.com/rckc/CoderDojoUWA2016</p>"},{"location":"advanced/mnist/","title":"Handwritten Digit Classification","text":"<p>We will program and train a machine learning model to recognize handwritten numbers. The code for this lesson can be found here.</p>"},{"location":"advanced/mnist/#but-what-is-machine-learnig","title":"But What Is Machine Learnig?","text":"<p>Process of determining the function that gives a plausible result y for a set of inputs, in form of a vector x. In its simplest form, this could be linear regression, where we find the line of best fit through the data.</p> <p>In more complex forms, however, this can be training a neural network to fit very non-linear data. We will use a type of neural network to recognize our handwritten numbers.</p> <p></p>"},{"location":"advanced/mnist/#types-of-neural-networks","title":"Types of Neural Networks","text":"<p>As you can see, there are many different types, or architectures of neural networks. Some of the most common are Feed Forward, Recurrent, LSTM, and AutoEncoder neural networks. The other most common is the one that we will use, or a Convolutional Neural Network.</p>"},{"location":"advanced/mnist/#convolutional-neural-network","title":"Convolutional Neural Network","text":"<p>Since we have image data, we will use a Convolutional Neural Network (CNN). A CNN works by sliding \"windows\" over the input image and aggregating nearby pixels together. </p>"},{"location":"advanced/mnist/#importing-packages","title":"Importing Packages","text":"<p>For this project, we will be using a machine learning package called Keras. This makes it really easy to construct our neural network. We also import matplotlib to visualize our data, and numpy for some utilities. <pre><code>import keras\nfrom keras.datasets import mnist  # Get dataset\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten  # Need these types of layers\nfrom keras.layers import Conv2D, MaxPooling2D  # Need convolutional layers\n\nimport matplotlib.pyplot as plt \nimport matplotlib.image as mpimg\n\nimport numpy as np \n</code></pre></p>"},{"location":"advanced/mnist/#loading-data","title":"Loading Data","text":"<p>Important to load both a training and testing set to make sure the CNN is not \"memorizing\" the set of images it will train on. This would lead to awful accuracy in the \"real world\" <pre><code># input image dimensions (pixels)\nimg_rows, img_cols = 28, 28\n\n# the data, split between train and test sets\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# manipulate the data for the CNN\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\ninput_shape = (img_rows, img_cols, 1)\n</code></pre></p>"},{"location":"advanced/mnist/#preprocessing-data","title":"Preprocessing Data","text":"<p>We want to have our CNN work with numbers between 0 and 1. Since pixel values are from 0-255, we divide all numbers by 255 in order to make them between 0 and 1. We then can see how many training and testing samples we have. <pre><code>x_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')\n</code></pre></p>"},{"location":"advanced/mnist/#look-at-data","title":"Look At Data","text":"<p>In the next few cells, we will look at an example of a digit and see what number it is in the training set.</p> <p><pre><code>x_train[0]\n</code></pre> <pre><code>pixels = x_train[0].reshape((28, 28))\n\nplt.imshow(pixels, cmap='gray')\n</code></pre> <pre><code>print(y_train[0])\n</code></pre></p>"},{"location":"advanced/mnist/#desired-output","title":"Desired Output","text":"<p>We want to convert the desired output from a number n to a vector where the nth element is 1 and the rest are 0.</p> <p>Example: n = 5 Resulting Vector = {0, 0, 0, 0, 0, 1, 0, 0, 0, 0}</p> <pre><code>num_classes = 10\n\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\n</code></pre>"},{"location":"advanced/mnist/#define-model","title":"Define Model","text":"<p>Now here is the fun part. Building the model! We will have a 5 layer neural network. Feel free to play around with some of the parameters and see what works better or worse!</p> <pre><code>model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=input_shape))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))  # Prevent overfitting\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.summary()\n</code></pre>"},{"location":"advanced/mnist/#set-parameters","title":"Set Parameters","text":"<p>Here, we will set two parameters for the network. The first is batch size, which determines how many training examples we will look at before changing the weights in the model. We will also set the number of epochs, or iterations through the entire training set.</p> <pre><code>batch_size = 128  # How many training examples will we look at before updating the weights in the matrix\nepochs = 12 # How many times we will run through the complete training set\n</code></pre>"},{"location":"advanced/mnist/#compile-and-train-model","title":"Compile and Train Model","text":"<p>Here, we compile the model and then train it. A couple things to note. We are using the Adam optimizer, as compared to others such as stochastic gradient descent. We are measuring the success of the model through the categorical crossentropy loss metric, which determines how to adjust the weights within the model.</p> <pre><code>model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_test, y_test))\n</code></pre>"},{"location":"advanced/mnist/#test-model","title":"Test Model","text":"<p>Now here is the big finish, lets see how well the model performs! We will do this by running through our test set and having the model produce a prediction. Thankfully, there is already a function built into the model for this. <pre><code>score = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n</code></pre></p> <p>Let's see what happens on an individual image level: <pre><code>to_predict = np.array([x_test[0]])\n\noutput = model.predict(to_predict)\n\npixels = to_predict[0].reshape((28, 28))\n\nplt.imshow(pixels, cmap='gray')\n</code></pre> <pre><code>output\n</code></pre> <pre><code>np.argmax(output)\n</code></pre> And there you have it! Congratulations on successfully creating, training, and testing your own neural network.</p>"},{"location":"advanced/stocks/","title":"Stock Analysis and (Virtual) Trading With Python","text":"<p>Disclaimer - This is NOT Financial advice</p> <p>Checkout the notebook here.</p>"},{"location":"advanced-python/01-intro/","title":"Advanced Python","text":"<p>Here are some suggested programs for doing more advanced Python programming.  Here we define advanced as anything that is not covered under our Beginning Python class that usually runs between one and three hours.</p>"},{"location":"advanced-python/01-intro/#roll-the-dice","title":"Roll the Dice","text":"<p>This lab uses the random number function to generate dice rolls.  It uses a while loop to continue to roll a pair of six-sided dice repeatedly. [./02-roll-the-dice.md]</p>"},{"location":"advanced-python/02-roll-the-dice/","title":"Roll the Dice","text":"<p>In this game the program generates two random numbers between 1 and 6.  The program then asks the user if they want to roll the dice again.  If they answer y or yes then the pair of dice are rolled again.</p> <pre><code>import random\nmin = 1\nmax = 6\n\nroll_again = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\":\n    print(\"Rolling the dice.  The values are:\")\n    print(random.randint(min, max))\n    print(random.randint(min, max))\n    roll_again = input(\"Roll the dices again?\")\n</code></pre> <pre><code>Rolling the dice.  The values are:\n4\n4\nRoll the dices again?\n</code></pre>"},{"location":"intermediate/01-intro/","title":"Introduction to Intermediate Python","text":"<p>This course assumes you are familiar with beginning concepts in Python such as variables, loops, conditionals, random numbers, functions, function parameters, lists and basic recursion.  We strongly suggest that you have completed the CoderDoj Twin Cities Beginning Python Class BEFORE you do the intermediate labs.</p> <p>Note that you can do the first four lessons using web-based Python programming tools like Trinket.io or repl.it.  Starting with lesson #5 on Files you will need to have Python installed on your local computer.  Please visit the Python.org web site for the installation instructions on your operating systems.  You can use the command-line version of Python from a Terminal or shell or you can install one of the Python Integrated Development Environments (IDEs).</p> <p>The concepts in this course include:</p> <ol> <li>Variables and Scope - In this lab we learn that you can control what parts of your program can access a variable.  This comes in handy when we write larger programs.</li> <li>Data types - This lab give you a tour of some of the data types in Python other than boring strings and integers.</li> <li>Checking Data Types of Function Parameters - in the beginning course we learned how to pass parameters to functions.  Now we learn how to make sure our functions get the data that they expect!</li> <li>Maps - Maps or dictionaries are sets of key-value pairs that are crazy flexible.  Unlike a list, where the index can only be fixed sequence of integers starting with 0, the keys in a map can be any integer or string in any order.</li> <li>Files - In this lesson we will learn how to open a file and read the data into our program with just a few lines.  Not only can we read in data, but we can also write out data!  So much power in a few lines of code!</li> <li>Images - In our CoderDojo AI Racing League we will be learning how to make a car drive autonomously.  But first we need to be able to read in images and display them.  In this lab we will show you how easy this is!</li> <li>Defining Your Own Modules - In the Beginning Python class we learned how to create functions.  Now we learn how to package them up so they are easy for others to use.</li> <li>dir() function - If you ever want to know what functions you can throw at something we got this secret tool called \"dir\".  It really takes the mystery out of what functions you can use and avoids trying to guess what function names are used.  Not that guessing games aren't fun!</li> <li>Regular expressions - You sometimes want a list of all the files in a folder that have a .jpg extension for images.  This lesson will show you how we can use a shorthand notation to make it easy to specify what files to include and which ones to skip.</li> <li>Debugging - When we have a hard time understanding what our programs are doing we need to be able to peak in and see the results of small steps of our programs.  This lesson will show you how to squash those little \"bugs\" or errors in our code.  (not real bugs, that would be mean!)</li> </ol>"},{"location":"intermediate/01-variables-scope/","title":"Variables and Scope","text":""},{"location":"intermediate/01-variables-scope/#variables","title":"Variables","text":"<p>If you've made it this far, you know a variable is a container for data in Python. Let's dive a little deeper into the world of variables!</p>"},{"location":"intermediate/01-variables-scope/#naming-conventions","title":"Naming conventions","text":"<p>In the Python community, the general accepted format for variable and function names is all lower case, with multiple words separated by underscores. For example:</p> <p>variable = 0</p> <p>my_variable = 0</p> <p>my_function_name()</p>"},{"location":"intermediate/01-variables-scope/#giving-variables-and-functions-meaningful-names","title":"Giving variables and functions meaningful names","text":"<p>Variable names should be meaningful to you as the programmer, to any other developers that may be collaborating with you and any developers that may look at your code in the future. Below are two instances of the same code using different variable and function names. Which is easier to read?</p> <pre><code>def my_first_function(arg):\n  variable1 = arg + 2\n  return variable1\n\ndef my_second_function(arg):\n  variable = arg * 5\n  return variable\n\nprint(my_first_function(my_second_function(5)))\n</code></pre> <pre><code>def plus_two(num):\n  two_more = num + 2\n  return two_more\n\ndef times_five(num):\n  five_times = num * 5\n  return five_times\n\nprint(plus_two(times_five(5)))\n</code></pre>"},{"location":"intermediate/01-variables-scope/#variable-scope","title":"Variable Scope","text":"<p>A variable's scope refers to where in your code you can access that variable. The scope of a variable defined within a function is limited to the function in which it is defined. This is an example of a local variable.  For example, using the more legible code above: </p> <pre><code>def plus_two(num):\n  two_more = num + 2\n  return two_more\n\ndef times_five(num):\n  five_times = num * 5\n  return five_times\n\nprint(plus_two(times_five(5)))\n\nprint(five_times) \n</code></pre> <p>Attempting to print the value of five_times within the global scope of the code will result in a NameError, because the scope of the variable five_times is limited to the times_five function. Conversely, a global variable is a variable that can be accessed anywhere within your code. Global variables are usually created within the main body of your code, that is outside of functions, as demonstrated below. You can see the my_name variable is accessible within the who_is_awesome function.</p> <pre><code>my_name = \"Zack\"\ndef who_is_awesome():\n    print(my_name + \" is awesome!\")\n</code></pre> <p>You can make a variable used within a function globally accessible by using the 'global' keyword. For example,</p> <pre><code>def who_is_awesome(name):\n    global awesome_statement\n    awesome_statement = name + \" is awesome!\"\n    print(\"Variable Reference Within Function: \" + awesome_statement)\n\nwho_is_awesome(\"Zack\")\nprint(\"Global Variable Use: \" + awesome_statement)\n</code></pre>"},{"location":"intermediate/01-variables-scope/#food-for-thought","title":"Food for Thought","text":"<p>When would it make sense to use the global keyword within a function to make a variable globally accessible, instead of returning the variable from the function? </p>"},{"location":"intermediate/02-data-types/","title":"Data Types","text":""},{"location":"intermediate/02-data-types/#data-types","title":"Data Types","text":"<p>So we know that data is a piece of information, but there are of course different types of data! Let's illustrate the importance of data types...</p> <pre><code>three_string = \"3\"\nthree_integer = 3\n\nprint(three_string*3)\n\nprint(three_integer*3)\n</code></pre> <p>Notice the difference in the output when multiplying three_string and three_int by three. three_string * 3 returned 333, whereas three_integer * 3 returned 9. This is because the three_string variable is a string datatype. </p>"},{"location":"intermediate/02-data-types/#what-are-the-different-data-types","title":"What are the different data types","text":"<p>Text</p> <ul> <li>string: str<ul> <li>example: <code>my_string = \"this is a string\"</code></li> </ul> </li> </ul> <p>Numeric</p> <ul> <li>integer: int<ul> <li>example: <code>my_int = 3</code></li> </ul> </li> <li>float: float<ul> <li>example: <code>my_float = 3.14</code></li> </ul> </li> </ul> <p>Both integers and floats can be negative. For example: <code>my_negative_int = -3</code></p> <p>Sequence</p> <ul> <li>List: list \u2014 an unordered list of data / objects. <ul> <li>example: <code>my_list = [1, 2, my_float, 4, \"Bananas\"]</code></li> </ul> </li> <li>Tuple: tuple \u2014 an ordered and immutable list of of data / objects. Immutable means unchangeable, once you have defined a tuple you cannot change, remove or reorder elements\u2014 for any of these operations, use a list. <ul> <li>example: <code>my_tuple = (1, 2, my_float, 4, \"Bananas\")</code></li> </ul> </li> </ul> <p>As you can see, elements in lists and tuples do not have to be the same data type. There are three integers, a variable and a string in both the list and tuple shown above.</p> <p>Boolean</p> <ul> <li>Boolean: bool \u2014 a binary data type that is either True or False</li> <li>example: <code>my_bool = True</code></li> </ul> <p>None</p> <p>-None: NoneType \u2014 <code>None</code> is a keyword in Python used to indicate a null value. None differs from False or an empty string (<code>\"\"</code>). A function that does not specify a return value will always return None.</p> <pre><code>def no_return():\n  print(\"This function does not return anything.\")\n\nno_return_response=no_return()\n\nprint(no_return_response == None)\nprint(type(no_return_response))\n</code></pre> <p>As you can see from the code above, when we assign the result of the no_return() function call to the no_return_response variable, the print statement in the function is executed. However, the value of no_return_response is None, since there was no return statement in the no_return function.</p> <p>Mapping</p> <p>-Dictionary: dict \u2014 an unordered data type consisting of key, value pairs</p> <p>Creating a dictionary</p> <p>A dictionary is demarcated by curly braces around key:value pairs that are separated by commas. Keys and values do not need to be the same data types. </p> <pre><code>myDictionary = {\n    \"dictionary\" : \"a book or electronic resource that lists the words of a language\", \n    \"int\" : \"short for integer. A whole number; a number that is not a fraction\",\"float\" : \"for our purposes this means a decimal number\u2014 a number that consists of a whole number and a fractional part\", \n    \"bool\" : \"short for boolean; a binary, True or False value\"\n  }\n</code></pre> <p>We'll learn more about dictionaries in the maps section</p>"},{"location":"intermediate/02-data-types/#type-casting","title":"Type Casting","text":"<p>Strings consisting of digits can easily be converted to floats or integers</p> <pre><code>#ask the user to input a number\nnumber=input(\"Type a number here and press 'enter' to proceed&gt;&gt;&gt;\")\n\n#side note: '\\n' tells python to print a newline\n#side note: we can use the the type keyword to determine what datatype a variable is\nprint(\"\\nthe number variable is currently the \" + str(type(number)) + \" data type\\n\")\n\n#as you can see the number the user entered belongs to the str data type, that's because input always returns a string.\n\n#so if we wanted to see what two times the number the user entered is how would we do it?\nprint(number * 2)\n\n#that didn't do what we wanted, did it?\n\n#let's convert the number variable to the int data type:\nnumber_as_int = int(number)\n\nprint(\"\\nthe number_as_int variable is currently the \" + str(type(number_as_int)) + \" data type\")\n\n#okay now our number is an int!\n\n#as you know, division operation always returns a float, even if there is no remainder\n\nmy_float= 8 / 4\n\nprint(\"\\nmy_float is \" + str(my_float))\n</code></pre>"},{"location":"intermediate/02-data-types/#you-try-it","title":"You Try It!","text":"<p>We know what type casting is and how to convert a string to an integer. We also know that a division operation in Python will always return a float, regardless of whether or not there's a remainder. Finally, we know using the modulo operator (%) in place of the division operator will return only the remainder\u2014for example, <code>7 % 4</code> will return 3. Using these pieces of knowledge, implement a function that will convert a float to an int, but only if there is no remainder. Complete the function definition for float_converter below! We've put some test conditions below to check your function.</p> <pre><code>def float_converter(some_float):\n  #if some_float has a remainder return the original float\n  #else return the some_float as an int\n\n#test our function:\nexpecting_float = float_converter(7/3)\nexpecting_int = float_converter(4/2)\n\ntest1 = expecting_float == 7/3 \ntest2 = expecting_int == 2 and type(expecting_int) == int\ntest3 = expecting_float != 2\n\nif test1 and test2:\n  print(\"Congrats! You've properly implemented the float_converter function!\")\nelif test1:\n  print(\"It looks like you've properly returned the original float, but didn't return some_float as an integer when there's no remainder.\")\nelif test2 and test3:\n    print(\"It looks like you've properly type returned some_float as an integer when there's no remainder! But you still need to return the original float when there is a remainder.\")\nelif test2 and not test3:\n  print(\"It looks It looks like you may always be returning my_float as an integer regardless of whether or not there's a remainder.\")\nelse: \n  print(\"It looks like you haven't properly implemented either of the requirements for float_converter.\")\n</code></pre>"},{"location":"intermediate/02-data-types/#food-for-thought","title":"Food for Thought","text":"<p>When learning about the dictionary data type, we created my_dict, which contained data types and their definitions. Let's say in addition to the definitions of each data type, I wanted to add part of speech and store an example of each data type. How might we do this? Hint: it involves more dictionaries!</p>"},{"location":"intermediate/03-data-type-validation/","title":"Checking Data Types of Function Parameters","text":"<p>In the beginning course we learned how to pass arguments to functions.  Now we learn how to make sure our functions get the data that they expect!</p> <p>We saw in the data types lab we can use the type keyword to get the type of a variable (e.g. <code>type(my_var)</code>). We can use this in combination with the is equal to operator (<code>==</code>) to make sure a variable passed to a function is the right data type. </p> <pre><code>def validateType(expecting_string):\n  if type(expecting_string)==str:\n    print(\"You passed a string!\")\n  else:\n    print(\"You passed something that wasn't a string!\")\n</code></pre> <p>As you may recall, during the data type labs we used the input function to solicit user input. The response from input is always a string! So if we ask the user to input a number, how do we confirm the input is in fact a number before type casting int on the user input? Remember type casting int on an alphabetic string will throw an error. Let's check it out.</p> <pre><code>def cast_to_int():\n  user_input=input(\"Enter an int\\n&gt;\")\n  user_input_as_int=int(user_input)\n  return user_input_as_int\n\nsome_int=cast_to_int()\nprint(some_int)\n</code></pre> <p>Let's try running this on trinket.io and when asked to enter an int, let's enter a word!</p> <p>As you can see we get a type error, because we're trying to convert an alphabetic string to an integer:</p> <pre><code>ValueError: invalid literal for int\n</code></pre> <p>So what's the work around? Strings have some very useful methods (methods are functions that belong to objects. We'll take about objects in the advanced section), among them <code>.isdigit()</code>! Let's see it in action!</p> <pre><code>def cast_to_int():\n  user_input=input(\"Enter an int\\n&gt;\")\n  if user_input.isdigit():\n    user_input_as_int=int(user_input)\n    return user_input_as_int\n  else:\n    return \"You did not input an integer!\"\n\nsome_int=cast_to_int()\nprint(some_int)\n</code></pre> <p>Let's say the user input was critical to the program we're building and if the user does not input an integer we want to throw an error to the user. We can use the <code>assert</code> keyword to achieve this. The syntax for the assert keyword is as follows: <code>assert some_conditional_statement, \"Error message to output.\"</code> Let's see it in action below! </p> <pre><code>def cast_to_int():\n  user_input=input(\"Enter an int\\n&gt;\")\n  assert user_input.isdigit(), \"You did not input an integer!\"\n  user_input_as_int=int(user_input)\n  return user_input_as_int\n\nsome_int=cast_to_int()\nprint(some_int)\n</code></pre>"},{"location":"intermediate/03-data-type-validation/#you-try-it","title":"You try it!","text":"<p>Let's say we want to continously bug a user until they input an integer. How might we achieve this using the lesson above + what we know about while loops?</p>"},{"location":"intermediate/04-maps/","title":"Maps in Python","text":"<p>-Dictionary: dict \u2014 an unordered data type consisting of key, value pairs</p> <p>Creating a dictionary</p> <p>A dictionary is demarcated by curly braces around key:value pairs that are separated by commas.</p> <pre><code>  my_dict = {\"dictionary\" : \"a book or electronic resource that lists the words of a language\", \"int\" : \"short for integer. A whole number; a number that is not a fraction\", \"float\" : \"for our purposes this means a decimal number\u2014 a number that consists of a whole number and a fractional part\", \"bool\" : \"short for boolean; a binary, True or False value\"}\n</code></pre> <p>Retrieving the value of a key from a dictionary: remember a dictionary consists of key, value pairs. To get a value for a given key we reference the key:</p> <pre><code>print(my_dict['integer'])\n</code></pre> <p>If we try to reference a key that does not exist in a dictionary a KeyError will be thrown.</p> <pre><code>print(my_dict['tuple'])\n</code></pre> <p>A quick way to avoid the KeyError is by using the .get() method for dictionaries: </p> <pre><code>print(my_dict.get('tuple')) # this will print None because the key 'tuple' does not exist in my_dict. \n</code></pre> <p>Another way to avoid the KeyError and determine if a key exists in a dictionary is to use the <code>in</code> keyword.</p> <pre><code>if 'tuple' in my_dict:\n  print(\"'tuple' is a key in my_dict\")\nelse:\n  print(\"'tuple' is NOT a key in my_dict\")\n\nif 'int' in my_dict:\n  print(\"'int' is a key in my_dict\")\nelse:\n  print(\"'int' is NOT a key in my_dict\")\n</code></pre> <p>Adding or updating a key / value pair to a dictionary:</p> <pre><code>my_dict['str']= \"short for string; a text data type in Python defined using a pair of double or single quotes around the data\"\n</code></pre>"},{"location":"intermediate/04-maps/#you-try-it","title":"You try it!","text":"<p>Using your knowledge of how dictionaries and conditional statements work, create a function that takes a key and a value as arguments and will either add the key/value pair and print \"This key / value pair has been added to the dictionary\" if the key does not exist in the dictionary, or prints \"This key is already in the dictionary!\" if the key already exists. Also important to keep in mind when doing this is what we just learned about variable scopes!</p> <pre><code>  my_dict = {\"dictionary\" : \"a book or electronic resource that lists the words of a language\", \"int\" : \"short for integer. A whole number; a number that is not a fraction\", \"float\" : \"for our purposes this means a decimal number\u2014 a number that consists of a whole number and a fractional part\", \"bool\" : \"short for boolean; a binary, True or False value\"}\n\n  def add_to_dict(key, value):\n    #Implement the function here!\n\n  add_to_dict(\"int\",\"an integer\")\n  #This should print \"This key is already in the dictionary!\"\n\n  add_to_dict(\"tuple\",\"an ordered, immutable list of data / objects\")\n  #This should add the key/value pair to the my_dict dictionary and print \"This key / value pair has been added to the dictionary\"\n</code></pre>"},{"location":"intermediate/05-files/","title":"Reading and Writing Files in Python","text":"<p>Most of the initial labs until now used the Trinket web site to teach you how to program Python.  Although many of these labs use Trinket, some of the labs in the intermediate class need access to your local file system to learn how to open and manipulate files.  To do this you must install Python on your local computer.</p> <p>To install Python on your computer visit the Python.org web site and follow the installation instructions for your computer operating system (Windows, Mac, Linux etc.)</p> <p>At this point you should now have python installed on your computer and no longer be using trinket.io. We recommend installing Anaconda and using the Spyder integrated development environment (IDE). </p> <p>Python makes it easy to read and write text files. The general syntax for opening a file is as follows:</p> <p><code>file = open('/file/path/filename.txt', 'mode')</code></p> <p>The first argument is the path the file on your computer. If the file you're trying to open is in the same folder as your python script you can just input the filename, if not you'll need the path to file. For example, let's say you're using a Mac, your username is Bella, and you're trying to open a file called \"myfile.txt\" in your downloads folder. The path to that file would be: <code>/Users/Bella/Downloads/myfile.txt</code></p> <p>Valid arguments for the mode parameter are:</p> <ul> <li>'w': writing to a file, this will overwrite a file if it already exists.</li> <li>'a': append to a file, you can add new lines to a file that already exists, otherwise it will create the file.</li> <li>'r': to read a file.</li> </ul>"},{"location":"intermediate/05-files/#reading-files","title":"Reading Files","text":"<p>For our example we're going to download Herman Melville's Moby-Dick from the Gutenberg Project to read.</p> <pre><code>    f = open(\"/Users/Bella/Downloads/moby10b.txt\",\"r\")\n\n    ### Let's take all the lines in Moby-Dick and store them in a list!\n\n    lines = f.readlines()\n\n    ### Close the file\n\n    f.close()\n</code></pre> <p>Calling the <code>.readlines()</code> method on a file is very useful. If we wanted to do this manually, we would iterate over the lines in the file and add them one by one to a list.</p> <pre><code>    f = open(\"/Users/Bella/Downloads/moby10b.txt\",\"r\")\n\n    lines = [] #define empty list\n\n    for line in f:\n        lines.append(line) #we can use the .append() method to add new items to a list!\n\n    f.close()\n</code></pre> <p>Let's say we needed to know exactly how many times each word appears in Moby-Dick: how might we do that? We'd have to account for things like punctuation, captalization and newline characters ('\\n'). We'd also need to get every word by itself.</p> <pre><code>from string import punctuation #punctuation from the string library is a string that contains all punctuation marks\n#you can run print(punctuation) to see what this looks like\n\npunctuation_list = list(punctuation) #convert string of punctuation marks to list\n\n\nf = open(\"/Users/Bella/Downloads/moby10b.txt\", \"r\") #open Moby-Dick file\nlines = f.readlines() #put all lines from Moby-Dick into a list\nf.close() #close the file\n\nclean_lines = [] #empty list for lines stripped of newline characters and all characters converted to lowercase\n\nfor line in lines: #go through every line in the file\n    clean_line = line.strip(\"\\n\") #get rid of new-line characters\n    clean_line = clean_line.lower() #convert everything to lowercase\n    clean_lines.append(clean_line) #add cleaned line to clean_lines\n\nwords={} #create empty dictionary for words\n\nfor line in clean_lines: #go through every line in the file\n    for mark in punctuation_list: #go through every punctuation mark \n        line=line.replace(mark,\"\") #use replace method to replace each possible punctuation mark with an empty string\n    line_words=line.split(\" \") #we're using the string split() method to separate each line by space character\n    #this converts the line to a list\n    #for example: \"This is a sentence.\".split(\" \") --&gt; ['This', 'is', 'a', 'sentence.']\n    for word in line_words: #iterate over every word in the line\n        if word not in words: # if we haven't seen this word yet\n            words[word]=1 #add it to the words dictionary, and mark the count as 1\n        else:\n            words[word]+=1 #we've already seen this word, so increment the count by 1\n</code></pre> <p>The method we used above to remove punctuation characters from the lines is not the most computationally efficent. We're going to learn a better way to do this in the section on Regex expressions.</p> <p>One thing we left out from the mapping section is that you can iterate over a dictionary using the .items() method. Here's what that looks like:</p> <pre><code>my_dict = {1:\"one\",2:\"two\",3:\"three\"}\n\nfor key, value in my_dict.items():\n    print(key, value)\n#this prints:\n#1 one\n#2 two\n#3 three\n</code></pre>"},{"location":"intermediate/05-files/#you-try-it","title":"You Try It!","text":"<p>If you recall, a dictionary is an unordered data structure. Use what we learned about iterating over items in a dictionary to determine what word occurs the most frequently in Moby-Dick!</p>"},{"location":"intermediate/05-files/#writing-files","title":"Writing Files","text":"<p>Let's say we wanted to write out Moby-Dick with no capital letters. Here's how we could approach that:</p> <pre><code>f = open(\"/Users/Bella/Downloads/moby10b.txt\", \"r\") #open Moby-Dick file\nlines = f.readlines() #put all lines from Moby-Dick into a list\nf.close() #close the file\n\nnew_file = open(\"/Users/Bella/Documents/moby-dick_lowercase.txt\", \"w\") #write new file to Documents folder\n\nfor line in lines:\n    new_file.write(line.lower())\n\nnew_file.close()\n</code></pre>"},{"location":"intermediate/06-images/","title":"Reading Images in Python","text":"<p>Opening and displaying images in Python is pretty straightforward. It's a bit different than opening text files though. To open an image, let's use Python's built-in pil library.</p> <pre><code>from PIL import Image\nmy_image = Image.open(\"/path/to/image.jpg\")\nmy_image.show()\n</code></pre> <p>The CoderDojo AI Racing League will explore more around working with image data.</p>"},{"location":"intermediate/06-object-classes/","title":"Object Classes in Python","text":"<p>In the mid 1960s the term Object-Oriented Programming\u201d (OOP) was coined by Alan Kay, one of the pioneers in computer science.  Alan's idea was to group data structures and the functions that manipulate that data together in a unit called an object class.  Although many Python programmers can be productive just writing simple functions, because there are many Python libraries that use objects, we think you should be familiar with these terms, even if you decide you don't want to deal with the complexities of building your own Python object classes.</p> <p>Python also has features that allow you dynamically probe the structure of object classes, even if you can't find the original source code used to create the object classes.  If you can't recall how to do something with an object class these tools can provide you a quick reminder.</p>"},{"location":"intermediate/06-object-classes/#the-dir-function","title":"The dir() function","text":"<pre><code>my_list=[1,2,3,4]\n\ndir(my_list)\n</code></pre> <p>returns: <pre><code>['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n</code></pre></p>"},{"location":"intermediate/07-modules/","title":"Introduction to Intermediate Python","text":""},{"location":"intermediate/07-modules/#modules","title":"Modules","text":"<p>Modules are a way to store and install reusable Python code. You can create your own modules by defining a set of functions that may be useful to other developers, and packaging these functions in a specific way so the other developers can download and easily integrate your code into their projects.</p> <p>To define a module, lets create a new file called <code>fibo.py</code> in your current directory. Lets add the following code:</p> <pre><code>def fib(n):    # write Fibonacci series up to n\n    a, b = 0, 1\n    while a &lt; n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\ndef fib2(n):   # return Fibonacci series up to n\n    result = []\n    a, b = 0, 1\n    while a &lt; n:\n        result.append(a)\n        a, b = b, a+b\n    return result\n</code></pre> <p>Now that we have some functions defined, how do we access them? Let's open the Python shell (or create a new file), and run/create:</p> <pre><code>import fibo\n\nfibo.fib(10)\n\nres = fibo.fib2(10)\nprint(res)\n</code></pre> <p>Now we have created and called our very own Python module! We can also import specific functions instead of the whole module, like this:</p> <pre><code>from fibo import fib\n\nfib(10)\n</code></pre> <p>In further labs, we will see how you can view the contents of a given module using the dir() functionality.</p> <ul> <li>Lab heavily inspired (code credited to): https://docs.python.org/3/tutorial/modules.html</li> </ul>"},{"location":"intermediate/08-dir/","title":"Python Objects and the dir() function","text":"<p>In Python we have the ability to associate a group of functions with any object class.  These functions when grouped together with an object are called methods.  You can think of them accessor methods go get access to the data or behavior of an object class.</p> <p>For example, a dictionary object has the <code>.items()</code> method. So how do you know what methods are available to you? That's where the dir function comes in! Just pass whatever data or object you want to know about as an argument. </p> <pre><code>my_list=[1,2,3,4]\n\ndir(my_list)\n\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n</code></pre> <p>You can see this returns a list of methods, a lot of which begin and end with <code>__</code>, those are special methods that we won't worry about for the purposes of this lab. But the rest of them are methods we can use on a list object. For example, <code>.pop()</code>.</p> <pre><code>my_list=[1,2,3,4]\n\nlast=my_list.pop()\n\nprint(last) #prints 4\n\nprint(my_list) #prints [1,2,3]\n</code></pre> <p>The pop() method will remove and return the last element from the list, that is if you call pop without passing in an argument, as we just did. Pop will accept one optional argument, that is index...you can pass the index of the item you want to remove from the list and return. With lists we start counting indices from 0. So in the list below 1 is at the 0th index and 6 is at the 5th index. </p> <pre><code>my_list=[1,2,3,4,5,6]\n\nprint(my_list[0]) # prints 1\n\nprint(my_list[5]) # prints 6\n\nprint(my_list.pop(2)) # removes and prints 3\n\nprint(my_list) # prints [1,2,4,5,6]\n</code></pre>"},{"location":"intermediate/09-regex/","title":"Regular Expressions in Python","text":"<p>A regular expression is a shorthand notation for describing a search pattern.  Regular expressions are handy whenever you have one ore more strings and you want to detect if a specific patten of characters appears in that string.  Regular expressions are mostly standardized so that if you use them other developers will quickly be able to read this the patten notation and understand the function of the pattern.</p>"},{"location":"intermediate/09-regex/#finding-four-digits-in-an-input-string","title":"Finding four digits in an input string","text":"<p>Let's take a simple example.  What if you want an input to to a function to contain four digits.  The string <code>\\d</code> matches a single digit.  Here is the python program to check to see if there are four consecutive digits in an input string:</p> <pre><code>import re\nmy_input = '1234'\n\n# check to see if there are four consecutive digits somewhere in the input\ndigits_test = re.search('\\d\\d\\d\\d', my_input)\n\nif digits_test:\n  print(\"We have four digits!\")\nelse:\n  print(\"Invalid data\")\n</code></pre> <p>Run the regex-01 program on Trinket.io</p> <p>If you run the program as-is, it will tell you that the string '1234' will pass the test and the string We have four digits, but if you change the my_input to be 123x then the Invalid data will be returned.</p> <p>The name of the regular expression module is just \"re\".  We must have an import this line with the \"re\" module at the start of our program.  The key line has re.search() function with two parameters.  The first parameter is the regular expression and the second is the string to be tested.</p> <p>The exact way to read this line is:</p> <p>check to see if there are four consecutive digits somewhere in the input</p> <p>Note that if you put letters or spaces before or after the four digits the test will still pass.</p>"},{"location":"intermediate/09-regex/#finding-exactly-four-digits","title":"Finding exactly four digits","text":"<p>What if you wanted exactly four digits? For example say you have a phone system that has exactly four-digit extensions. To do this you would need to also specify two additional characters: the start expression \"^\" and the end character \"$\".</p> <p>Here is what that program would look like:</p> <pre><code>import re\nmy_input = '1234'\n\n# check to for exactly four digits\ndigits_test = re.search('^\\d\\d\\d\\d$', my_input)\n\nif digits_test:\n  print(\"We have exactly four digits!\")\nelse:\n  print(\"Invalid data\")\n</code></pre> <p>Run the regex-02 program on Trinket.io</p>"},{"location":"intermediate/09-regex/#checking-for-one-or-more-digits","title":"Checking for one or more digits","text":"<p>Sometimes we don't know exactly how many digits an input field should contain.  We might just want to say \"look for one or more digits\".  We can do this by using the '+' expression which says \"look for one or more of the previous expression\".  Here is a program that will check for one or more digits:</p> <pre><code>import re\nmy_input = '1'\n\n# check for one or more digits\ndigits_test = re.search('^\\d+', my_input)\n\nif digits_test:\n  print(\"We have one or more digits!\")\nelse:\n  print(\"Invalid data\")\n</code></pre>"},{"location":"intermediate/09-regex/#common-regular-expression-characters-for-validating-inputs","title":"Common regular expression characters for validating inputs","text":"<p>Now that you have seen several examples of regular expressions, lets list some of the most common ones we use to validate input data.:</p> Expression Meaning Example \\d A single digit in the range 0 to 9 '\\d\\d\\d' for validating '123' ^ The start of a string '^hello' $ The end of a string 'hello'$ [a-z] Any lowercase character in the range of 'a' to 'z' '[a-z]\\d\\d' will match 'x12' [A-Z] Any uppercase character in the range 'A' to 'Z' '\\d\\d[A-Z] will match '47N' . Zero or more occurrences of the previous expression '\\d.' would match an empty string, '1' or '12' + One or more occurrences of the previous expression '\\d+' would match '1' or '12' but would not match an empty string ** ** Or \\w Characters that typically make up words. This includes upper and lowercase charcters [a-z], [A-Z] and digits as well as the underscore \\w would match 'hello_world123' <p>Note that there is an important difference between using the \"dot\" (period) and the \"plus\" characters.  We use the dot when we want to check for an optional integer.  We use the plus sign when we require an integer.  When we are gathering information from users in a form, we often must be careful to specify what fields should require an integer input for the field to be valid.</p>"},{"location":"intermediate/09-regex/#combining-regular-expressions-checking-e-mail-address","title":"Combining Regular Expressions: Checking E-mail Address","text":"<p>We can combine regular expressions to make more complicated expressions.  For example here are some rules that form a simple e-mail address:</p> <ol> <li>a string of word characters</li> <li>the ampersand character '@'</li> <li>a string of additional word characters</li> <li>the period character '.'</li> <li>some additional characters such as 'com', 'edu'</li> </ol> <p>Here is a regular expression that does this:</p> <pre><code>re.search('^\\w+@\\w+\\.\\w+$', my_input)\n</code></pre> <p>Recall that the \\w+ character looks for one or more word characters. Note that we had to use a backslash in from of the period so it takes it as a literal period and not as a regular expression for zero-or-more of prior expression.</p> <p>Here is a program that prompts the user to input a valid e-mail:</p> <pre><code>import re\nmy_input = 'a@myco.com'\n\n# check for one or more digits\nif re.search('^\\w+@\\w+\\.\\w+$', my_input):\n  print(\"E-mail address valid\")\nelse:\n  print(\"Error: Invalid email address!\")\n</code></pre>"},{"location":"intermediate/09-regex/#finding-the-right-regular-expression","title":"Finding The Right Regular Expression","text":"<p>You often are confronted with validating complex fields like phone numbers, zip codes, and postal addresses.  The good news is that many other people have also needed to do this and with a bit of searching you can probably find a regular expression that meets your needs.  One of the best places to look for regular expressions is RegExLib.  You can not only search for a regular expression but you can test it on common patterns.  Other users have also voted on which regular expressions are their favorites.  There are also categories of regular expressions such as:</p> <ol> <li>E-mails</li> <li>Dates and times</li> <li>Strings</li> <li>Numbers</li> <li>URI</li> <li>Addresses/Phone</li> <li>Markup</li> <li>Miscellaneous</li> </ol>"},{"location":"intermediate/09-regex/#from-search-to","title":"From Search to","text":"<p>The re module offers a set of functions that allows us to search a string for a match:</p> <p>Function    Description findall Returns a list containing all matches search  Returns a Match object if there is a match anywhere in the string split   Returns a list where the string has been split at each match sub Replaces one or many matches with a string</p>"},{"location":"intermediate/09-regex/#python-regular-expression-references","title":"Python Regular Expression References","text":"<p>Python RegEx Cheat Sheet Python Regular Expressions HOWTO</p>"},{"location":"intermediate/10-debugging/","title":"Debugging in Python","text":"<p>Uncaught errors in a Python script will cause it to abruptley hault. Utilizing the error output, also known as a stack trace will help us determine the root cause. The code below throws an error.</p> <pre><code>import random\n\nmy_list=[] #create empty list\n\n#get a random item from a list\ndef choose_random(some_list):\n    return random.choice(some_list)\n\n\nfor i in range(1,10): #(produces 1,2,3,4,5,6,7,8,9 over the 9 iterations of the loop)\n    my_list.append(i) #add the number to my_list\n    if i==1: #if the number of the current iteration of the loop is 1\n        my_list.pop(0) #remove the first element from the list\n    random.choice(my_list) #randomly chose an element from the list\n</code></pre> <p>This code throws an error and produces the following stack trace:</p> <pre><code>---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n&lt;ipython-input-24-593f65711788&gt; in &lt;module&gt;()\n      7     if i==1:\n      8         my_list.pop(0)\n----&gt; 9     random.choice(my_list)\n\n~/anaconda3/lib/python3.7/random.py in choice(self, seq)\n    259             i = self._randbelow(len(seq))\n    260         except ValueError:\n--&gt; 261             raise IndexError('Cannot choose from an empty sequence') from None\n    262         return seq[i]\n    263 \n\nIndexError: Cannot choose from an empty sequence\n</code></pre> <p>You can see the actual error, an IndexError is being thrown in the code for the random module (line 261 in random.py). The output text is helpful, it's saying it can't choose a random item from an empty list. So why is our list empty? We now need to determine where in our code the error is occurring, if you look up line 9, that's referring to line 9 in our code. So we know that line's causing the error, so we then have to ask in what case we're passing an empty list into random.choice(). If we go through each iteration of the loop, we can see that it's on the first iteration when i==1, that we remove the first element from my_list, doing this leaves an empty list and passing it into random.choice() causes the error. </p> <p>The first step in debugging should always be to read the stack trace, if the source of the error is not self-evident, StackOverflow and Google are your next best bet. </p>"},{"location":"intermediate/11-advanced-trinket-libs/","title":"Advanced Trinket Libs","text":"<pre><code>import sys\nimport math\nimport matplotlib\nimport numpy\nimport processing\nimport pygal\nimport random\nimport re\nimport string\nimport time\nimport turtle\nimport urllib\n</code></pre>"},{"location":"intermediate/12-plot-sin/","title":"Using Trinket to Learn MatPlotLib","text":"<p>Python is notable for having a rich library of tools for viewing data.  In this lesson we will use Trinket to learn how to use the popular matplotlib - a Python library for plotting data.</p> <p>This example uses the trigonometry function Sine.  Don't worry if you have not taken a trigonometry yet.  It is just a simple function that generates a wave of vertical height that range between -1 and 1 as we move down the X axis.  Imagine a circle rotating and the sin() function will reflect the angle of a point on the edge of the circle going up and down and the circle turns.</p> <p>See the Wikipedia Article on Sine for a description of the function.</p>"},{"location":"intermediate/12-plot-sin/#how-matploglib-works","title":"How Matploglib works","text":"<p>In order to get a plot of any function on the screen we need to first generate a list of points.  Each point has an x and y coordinate and the point (0,0) is usually on the middle left corner of the screen.</p> <p>Trinket has a plotting area of about 200 by 200 pixels.  So we will generate 200 points and plot them to get our chart.</p> <p>One of the best ways to get started is to create two lists: one of x coordinates and one of y coordinates like this:</p> <pre><code>x_list = []\ny_list = []\n</code></pre> <p>We then need to create a loop that has the x range change uniformly from 0 to 200 and then for each of these x values we will generate a y value and put them into the list.  We will use the list.append() function to add these numbers in pairs to both the X and Y lists like this:</p> <pre><code>for p in range(0,200): # we will use 200 points\n        x_list.append(p/10)\n        y_list.append(math.sin(p/10))\n</code></pre> <p>In this case \"p\" is just a temporary counter for each point we are going to add.  We are also going to divide both the X and Y values by 10 so that we get the values from 0 to 20 (not 0 to 200).  That way we can see how the sin() function varies in this range.</p> <p>Once we have our x and y points in two lists we are ready to plot.</p> <p>Here is how we use the matplot library:</p> <p><pre><code>import matplotlib.pyplot as plt\n...\nplt.plot(x_list,y_list)\nplt.show()\n</code></pre> Each time we change the list values we need to run the plt.show() function to do the drawing.</p>"},{"location":"intermediate/12-plot-sin/#full-example","title":"Full Example","text":"<p>Here is a full working example.  Note that we need to import the math library to use the sin() function.</p> <pre><code>import matplotlib.pyplot as plt\nimport math\n\nx_list = []\ny_list = []\nfor p in range(0,200): # we will use 200 points\n        x_list.append(p/10)\n        y_list.append(math.sin(p/10))\n\nplt.title('Using matploglib.pyplot to show the sin(x) function from x=0 to 20')\nplt.xlabel('x')\nplt.ylabel('sin(x)')\nplt.plot(x_list,y_list)\nplt.show()\n</code></pre> <p></p>"},{"location":"intermediate/12-plot-sin/#getting-fancy","title":"Getting Fancy","text":"<p>We can also put a grid axis and color on the plot:</p> <p>plot.grid(True, which='both')</p>"},{"location":"intermediate/20-installing-local-python/","title":"Installing a Local Desktop Python","text":"<p>The next few labs are labs that must be run on your local computer because the will interact with the local operating system and local file system.  You will not be able to use Trinket to run these programs.</p> <p>The main site for Python is here: https://www.python.org/</p> <p>If you go to that site there will be pages for Downloads and Documentation for each version of your desktop or PC.</p> <p>The best way to get detailed instructions or hints is to do a web search for a phrase such as:</p> <ol> <li>\"How do I install Python on my Windows 10 PC\"</li> <li>\"How do I install Python on my Mac\"</li> <li>\"How do I install Python on my Raspberry Pi\"</li> </ol> <p>You can also give a precise version of Python and your operating system such as:</p> <p>\"How to install Python 3 on MacOS Mojhave\"</p> <p>These tools usually give you command line access to Python using \"Terminal\" or \"Shell\".  To use Python you will need to open a command line and type \"python --version\" to verify that Python is installed correctly.</p> <p>Here is an example of what this looks like from a command line:</p> <pre><code>$ python --version\nPython 2.7.16\n</code></pre> <p>This indicates that python </p>"},{"location":"intermediate/20-installing-local-python/#you-system-path","title":"You System Path","text":"<p>The system path is a key list that holds a set of sequential places that Python looks for functions. <code>sys.path</code> is a list of places to look for code and it will execute the first function that it matches in this path.</p> <pre><code>import sys\n# The system path is a key list that holds a set of sequential places that Python\n# looks for functions.\n# sys.path returns a list of places to look for code and it will execute the\n# first function that it matches\nmyPath = sys.path\nfor step in range(0, len(myPath)):\n    print(step+1, myPath[step])\n</code></pre>"},{"location":"intermediate/20-installing-local-python/#using-conda-environments","title":"Using Conda Environments","text":"<p>We use conda to keep all our Python projects separate.</p> <pre><code>conda create -n coderdojo python=3\nconda activate coderdojo\n</code></pre>"},{"location":"intermediate/20-installing-local-python/#installing-python-in-an-integrated-development-environment-ide","title":"Installing Python in an Integrated Development Environment (IDE)","text":""},{"location":"intermediate/20-installing-local-python/#dealing-with-python-environments","title":"Dealing with Python Environments","text":"<p>If you are new to Python and you run into problems getting Python running on your desktop, you are not alone!  This challenges was well captured by cartoon, XKCD:</p> <p></p> <p>The root cause of this complexity is that there the Python community is a large sprawling mass of free-thinking developers that don't always play nicely together.  They are always improving their own libraries and releasing new versions.  They often depend on old libraries that conflict with the newer libraries on your local system.  They use Python for many different things on different operating systems and to solve different types of problems.  Some of them care deeply about compatibility with past version of Python and some of them need the latest version to be productive.</p> <p>Here are a few simple rules:</p> <ol> <li>Always be aware of the version of Python you are using.  Use the <code>python --version</code> tool to see this.</li> <li>Use different \"environments\" for different projects tasks that may need different version of different libraries.  Be familiar with tools like <code>conda</code> to manage these environments.  If you do use conda, make sure to activate these environments before you start.</li> <li>Know how to see where Python is looking for it's libraries and know how to use the <code>sys.path</code> function</li> <li>Use tools such as <code>pyenv</code> to control what Python environment you are using.</li> <li>Beware of using the default Python environments.  They are often out of date.</li> </ol>"},{"location":"intermediate/bfsMaze/","title":"Maze Solving with Breadth-First Search","text":"<p>In this lab, we are going to solve a maze with an algorithm called breadth-first search. Before we do though, we need to get some terminology out of the way. There are two main ways that we will be storing data, known as data structures. These are:</p> <ul> <li> <p>A graph is a data structure representing data that is interconnected. We will be representing our maze this way. Graphs are made of of nodes and edges. Think of edges as roads that connect different nodes together. In this maze, we will hopping from node to node via these edges.</p> </li> <li> <p>A queue is another commonly used data structure. Think of it as a line that we always take from the front of and always add to the back (no budging).</p> </li> </ul> <p>First, download the code template found in the <code>src/intermediate</code> folder of the repository, found here. Then, lets try and implement a solution to solve it!</p> <p>One solution is breadth-first search, or BFS. BFS works by cycling through all possible nodes one hop away from your current position, adding them to a queue and then cycling through all of those nodes in the queue to see if they are the solution. Lets see how it is implemented below:</p> <pre><code>#Takes as input a Square object node in a graph of Square nodes.\n# This will always be the Square node representing (0,0), the start position\n#Performs BFS until the goal Square is found (the Square with color = \"blue\").\n#Returns a list containing each Square node in the path from the start\n# (0,0) to the goal node, inclusive, in order from start to goal.\ndef find_path(start_node):\n    start_node.set_color(\"gray\")\n    start_node.prev = None\n\n    q = [] # Our queue of nodes visited\n    q.append(start_node) # Add starting node to the end of the queue\n    while len(q) != 0: # Runs when there are still nodes in the queue\n        start_node = q.pop(0) # Remove the node in the front of the queue\n        for node in start_node.adj:   # Look at every item in the current node's adjacency list\n            if node.get_color() == \"white\":  # If the color is white, we haven't visited this node before\n                node.set_color(\"grey\")\n                node.depth = start_node.depth + 1\n                node.prev = start_node\n                q.append(node)  # Add this new node to the queue\n            elif node.get_color() == \"blue\":  # If the color is blue, we have reached our goal\n                node.prev = start_node\n                visited = [node]\n                cur = node.prev\n                while cur != None: # Backtrack our path, adding nodes to the visited list as we go\n                    visited.insert(0, cur)\n                    cur = cur.prev\n                return visited\n        start_node.set_color(\"black\")\n</code></pre> <p>There are other ways to find paths in mazes, one of which we will explore in the next lab!</p> <ul> <li>This lab was heavily inspired by Nathan Taylor's University of Minnesota CSCI 4041 assignment.</li> </ul>"},{"location":"intermediate/dfsMaze/","title":"Maze Solving with DFS","text":"<pre><code>def visit(u):\n    u.set_color(\"gray\")\n    for vert in u.adj:\n        if vert.get_color() == \"white\":\n            vert.prev = u\n            path = visit(vert)\n            if path != None:\n                return path\n        elif vert.get_color() == \"blue\":\n            vert.prev = u\n            return vert\n    u.set_color(\"black\")\n\ndef find_path(start_node):\n    start_node.set_color(\"gray\")\n    start_node.prev = None        \n    goal = visit(start_node)\n    visited = []\n    cur = goal\n    while cur != None:\n        visited.insert(0, cur)\n        cur = cur.prev\n    return visited #Placeholder return to avoid errors\n</code></pre> <ul> <li>This lab was heavily inspired by Nathan Taylor's University of Minnesota CSCI 4041 assignment.</li> </ul>"},{"location":"jupyter/01-inline-test-setup/","title":"01 inline test setup","text":""},{"location":"jupyter/01-inline-test-setup/#test-of-jupyter-lab-inline-setup","title":"Test of Jupyter Lab Inline Setup","text":"<p>Rumor this work</p> <pre><code>from ipyturtle import Turtle\nt = turtle.Turtle()\nt.clear()\nt.resetscreen()\nt.color('blue')\nt.pensize(5)\nfor i in range(8):\n    t.fd(50)\n    t.rt(45)\nt\n</code></pre>"},{"location":"jupyter/01-setup/","title":"Setup Turtle on Jupyter","text":""},{"location":"jupyter/01-setup/#why-jupyter-notebook","title":"Why Jupyter Notebook","text":"<p>We will be running this library from within a Jupyter Notebook.  Jupyter Notebooks are part of an important type in programming called Literate Programming where code and explaination of your code are interspersed in cells. Jupyter Notebooks are sometimes called the \"New Excel\" because they are both popular ways to analize data.  Jupyter Notebooks are also popular with Data Scientists and Artificial Intelligence developers and has almost compleatly replaced the R Progamming programming language.</p> <p>We think that learning Python using Jupyter is ideal if you have some type of interactive way to see the results of your code.  By combining turtle graphics with Jupyter you get the best of both worlds.</p>"},{"location":"jupyter/01-setup/#two-ways-to-view-turtle-graphics","title":"Two Ways to View Turtle Graphics","text":"<p>There are two ways to view turtle graphics in Jupyter:</p> <ol> <li>With the turtle being drawn in a separate window</li> <li>With the turtle being drawn \"inline\" directly under your code</li> </ol> <p>In general, inline is preferred because you can keep track of many small exercises just by scrolling down. You can also print out the notebooks to show others your work.</p> <p>In many of these labs we will be using a special version of the turtle library that was developed by Thomas Kluyver from the UK called the \"mobilechelonian\". We want to thank him for this work.  If you want you can \"star\" the following github repository: https://github.com/takluyver/mobilechelonian</p> <p>Note that \"Chelonians\" are animals in the order Chelonia (or Testudines), which includes the turtles and tortoises.  By picking a very distinctive name for his implementation of the turtle library Thomas avoided collision with other python libraries that had the same name.</p>"},{"location":"jupyter/01-setup/#steps","title":"Steps","text":"<p>Here are the steps we will go through to get turtle running in our Jupyter Notebook:</p> <ol> <li>Install the conda python environment systems</li> <li>Create a new conda environment for our turtle and activate it</li> <li>Use the pip tool to install the turtle library</li> <li>Install the Jupyter Notebooks software</li> <li>Start up Jupyter Notebooks</li> <li>Test the turtle program</li> </ol>"},{"location":"jupyter/01-setup/#install-conda","title":"Install Conda","text":"<p>Google \"install python\" on your operating system. Google \"install conda\"</p>"},{"location":"jupyter/01-setup/#create-a-new-conda-envornment","title":"Create a new conda envornment:","text":"<p>Open your terminal.  Type in the following commands.</p> <pre><code>conda env list\nconda create -n turtle python=3.6\nconda activate turtle\npip install mobilechelonian\njuypter notebook\n</code></pre> <p>After you run the last command it will open a Jupyter Notbook in a web browser.  You can now test that the turtle library installed correctly.</p> <pre><code>from mobilechelonian import Turtle\nt = Turtle()\nt.forward(100)\n</code></pre> <p></p> <pre><code>help(Turtle)\n</code></pre>"},{"location":"jupyter/01-setup/#references","title":"References","text":"<p>Conda Documentation</p>"},{"location":"jupyter/02-draw-figure/","title":"Drawing Figure","text":""},{"location":"jupyter/02-draw-figure/#draw-figure-turtle-lab-in-jupyter","title":"Draw Figure Turtle Lab in Jupyter","text":"<p>In this lab we setup a new Jupyter notebook that will do turtle graphics.</p>"},{"location":"jupyter/02-draw-figure/#link-to-jypyter-notebook","title":"Link to Jypyter Notebook","text":"<p>Draw Figure Jypyter Notebook</p>"},{"location":"jupyter/02-setup-canvas/","title":"02 setup canvas","text":"<p>We will be using python canvas drawing library.  Unlike turtle graphics the canvas library has many powerful drawing tools.</p> <p>Python IPYCanvas Library</p>"},{"location":"jupyter/02-setup-canvas/#jupyter-lab","title":"Jupyter Lab","text":"<p>We will be running this library from within a Jypyter lab.</p>"},{"location":"jupyter/02-setup-canvas/#steps","title":"Steps","text":"<p>Install conda Create a new conda environment Install Jupyter lab Start up Jupyter Test Canvas</p>"},{"location":"jupyter/02-setup-canvas/#setup-with-conda","title":"Setup With Conda","text":"<p><pre><code>conda env list\nconda create -n turtle python=3.6\nconda activate turtle\njuypter lab\n</code></pre> After you run the last command it will open a web browser.</p>"},{"location":"jupyter/02-setup-canvas/#references","title":"References","text":"<p>Conda Documentation</p>"},{"location":"jupyter/20-canvas-color-bars/","title":"Canvas Color Bars","text":""},{"location":"jupyter/20-canvas-color-bars/#canvas-color-bars","title":"Canvas Color Bars","text":"<p>We can draw directly into the Jupyter Lab canvas by using the Canvas drawing component.</p> <p>The following draws several horizontal bars of different color.</p> <pre><code>from ipycanvas import Canvas\n\ncanvas = Canvas(width=400, height=170)\n\n# draw a some lines of different colors and widths\n\ncanvas.translate(10,10)\n\ncanvas.fill_style = 'red';\ncanvas.fill_rect(0, 0, 400, 10)\n\ncanvas.fill_style = 'orange';\ncanvas.fill_rect(0, 25, 400, 10)\n\ncanvas.fill_style = 'yellow';\ncanvas.fill_rect(0, 50, 400, 10)\n\ncanvas.fill_style = 'green';\ncanvas.fill_rect(0, 75, 400, 10)\n\ncanvas.fill_style = 'blue';\ncanvas.fill_rect(0, 100, 400, 10)\n\ncanvas.fill_style = 'purple';\ncanvas.fill_rect(0, 125, 400, 10)\n\ncanvas.fill_style = 'pink';\ncanvas.fill_rect(0, 150, 400, 10)\n\ncanvas\n</code></pre>"},{"location":"jupyter/20-canvas-color-bars/#experiments","title":"Experiments","text":"<p>Can you modify the above to use a list of colors and a for loop? The color list might be:</p>"},{"location":"jupyter/20-canvas-color-bars/#using-lists","title":"Using Lists","text":"<pre><code>from ipycanvas import Canvas\ncanvas = Canvas(width=400, height=250)\n\ncolors =['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'brown',\n         'cyan', 'lightgreen', 'lightblue']\ncanvas.font = '16px serif'\n\n# draw some boxes of different colors\n\ncanvas.translate(10,10)\nfor i in range(len(colors)):\n   canvas.fill_style = colors[i];\n   canvas.fill_text(colors[i], 0, 25*i + 10)\n   canvas.fill_rect(70, i*25, 400, 15)\n\ncanvas\n</code></pre>"},{"location":"pi/01-intro/","title":"Python on Raspberry Pi","text":""},{"location":"pi/01-intro/#learning-python-on-raspberry-pi","title":"Learning Python on Raspberry Pi","text":"<ul> <li> <p>Raspberry Pi Foundation Projects</p> </li> <li> <p>CoderDojo Pages on the Pi Site</p> </li> <li> <p>ThonnyThonny is a Integrated Development Environment for debugging Python code.  Unfortunatly, no turtle graphics are supported.</p> </li> <li> <p>Adafruit CircuitPython CircuitPython is a programming language designed to simplify experimenting and learning to program on low-cost microcontroller boards.</p> </li> <li> <p>Learning Python with Raspberry Pi Book</p> </li> <li> <p>Sparkfun Tutorial</p> </li> <li> <p>Controlling LED Strips with Python</p> </li> </ul>"},{"location":"repl/02-square/","title":"Square on Repl.it","text":"<pre><code>import turtle\nt = turtle.Turtle()\n\nt.fd(100)\nt.rt(90)\nt.fd(100)\nt.rt(90)\nt.fd(100)\nt.rt(90)\nt.fd(100)\nt.rt(90)\n</code></pre> <p>Sample Square Program on Repl.it</p>"},{"location":"repl/07-flower/","title":"Flower using Petal Function on Repl.it","text":"<pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndistance = 100\nangle = 120\n\ndef petal():\n   if i % 2:\n      dan.color('green')\n   else:\n      dan.color('lightgreen')\n   dan.left(30)\n   # draw a triangle and fill in the color\n   dan.begin_fill()\n   dan.forward(distance)\n   dan.right(angle)\n   dan.forward(distance)\n   dan.right(angle)\n   dan.forward(distance)\n   dan.end_fill()\n   dan.left(angle)\n\n# start off 45 right\ndan.right(45)\n# repeat the forward/right functions four times\nfor i in range(4):\n   petal()\n# now draw the stem\ndan.pensize(10)\ndan.right(45)\ndan.forward(200)\n</code></pre> <p>Sample Square Program on Repl.it</p>"},{"location":"repl/08-shape-function/","title":"Repl Shape Function","text":"<pre><code>import turtle\nt = turtle.Turtle()\ncolorList = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'pink', 'brown', 'gray', 'gold']\n\n\ndef shape(color, x, y, dist, edges):\n  t.penup()\n  t.goto(x,y)\n  t.pendown()\n  t.color(color)\n  t.begin_fill()\n  angle = 360 / edges\n  for i in range(edges):\n    t.fd(dist)\n    t.rt(angle)\n  t.end_fill()\n\n\nshape('red', -100, 100, 50, 4)\nshape('green', 50, 50, 50, 6)\nshape('blue', 50, -50, 40, 8)\n</code></pre>"},{"location":"repl/12-recursion/","title":"Recursion","text":""},{"location":"repl/12-recursion/#recursion","title":"Recursion","text":"<p>Recursion is when we write a function that calls itself.  It usually passes a parameter that changes and when it hits a limit it stops going.  This lab does a lot of drawing so to speed it up we will disable the turtle motion.</p> <p>Our recursive function is the draw_branch function.  It will draw a single branch and then call itself two times at its tip to draw two more smaller branches.</p>"},{"location":"repl/12-recursion/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\n\ncolorList = ['red', 'orange', 'green', 'blue', 'indigo', 'violet', 'brown']\n\ndef draw_branch(turtle, color, size, level):\n  if level &gt; 1:\n    turtle.pendown()\n    turtle.color(color)\n    turtle.forward(size)\n    turtle.right(20)\n    # draw three branches at half length with a branch on the tip of each branch \n    for i in range(0, 3):\n       turtle.forward(size/2)\n       draw_branch(turtle, colorList[i], size/2, level - 1)\n       turtle.backward(size/2)\n       turtle.left(20)\n    turtle.right(40)\n    turtle.backward(size)\n\nmyTurtle = turtle.Turtle()\nmyTurtle.shape(\"turtle\")\nmyTurtle.speed(50)\n\nlength = 150\nnumberPetals = 6\nmyTurtle.penup()\n# move to the bottom center\nmyTurtle.goto(0, -200)\nmyTurtle.left(90)\n\ndraw_branch(myTurtle, colorList[0], length, 4)\n</code></pre>"},{"location":"repl/12-recursion/#drawing","title":"Drawing","text":""},{"location":"repl/12-recursion/#link-to-program-on-replit","title":"Link to Program on Repl.it","text":"<p>Link to Program on Repl.it</p>"},{"location":"repl/12-recursion/#explanation","title":"Explanation","text":"<p>The first three lines will be the same for all our programs.  They import the turtle library into our program, create a new turtle object and then assign the turtle a shape icon.</p> <p>Note that at the start, the turtle is facing to the right.  After the last instruction, it is also facing to the right.</p>"},{"location":"repl/12-recursion/#experiments","title":"Experiments","text":"<p>Can you change the distance and angle the turtle moves?  What happens when you change the numbers for the forward and right functions?  Can you go left as well as right?</p> <p>Can you add more motion commands using copy and paste?</p>"},{"location":"strategy/","title":"Teaching Strategies","text":""},{"location":"strategy/#order-of-concepts","title":"Order of Concepts","text":"<p>Order of Concepts</p>"},{"location":"strategy/order-of-concepts/","title":"Order of Concepts","text":""},{"location":"strategy/order-of-concepts/#intro","title":"Intro","text":"<p>What is the role of visual feedback in teaching beginning Python?</p>"},{"location":"strategy/order-of-concepts/#no-visual-feedback","title":"No Visual Feedback","text":"<pre><code>What are the key concepts in learning Python for a 9th\ngrade student in the US?  List the concepts in the order\nthey should be taught and add justification for ordering.\n</code></pre> <ol> <li>Introduction to Programming and Python</li> </ol> <p>Justification: Begin by explaining what programming is and how it allows us to communicate instructions to a computer. Introducing Python's simplicity and readability sets a positive tone for beginners. 2. Setting Up the Development Environment</p> <p>Justification: Before coding, students need to install Python and set up an Integrated Development Environment (IDE) or use an online coding platform. This ensures they're ready to practice coding examples. 3. Basic Syntax and Output with print()</p> <p>Justification: Learning how to display information is fundamental. The print() function is simple and provides immediate visual feedback, which is motivating for new learners. 4. Variables and Data Types</p> <p>Justification: Variables store information that programs manipulate. Understanding data types like integers, floats, strings, and booleans is essential for handling different kinds of data. 5. Basic Operators and Expressions</p> <p>Justification: Operators allow students to perform calculations and manipulate data. This includes arithmetic operators (+, -, *, /) and logical operators (and, or, not). 6. User Input with input()</p> <p>Justification: Allowing programs to accept user input makes them interactive. Learning to use the input() function helps students understand how to receive and process external data. 7. Conditional Statements (if, elif, else)</p> <p>Justification: Conditionals introduce decision-making in programs. They allow the code to execute different actions based on certain conditions, which is critical for dynamic programming. 8. Loops (for and while Loops)</p> <p>Justification: Loops enable code to be executed repeatedly without redundancy. Understanding loops is key for tasks that require iteration, like processing items in a list. 9. Lists and Basic Data Structures</p> <p>Justification: Lists store collections of items. Introducing lists teaches students how to handle multiple pieces of data efficiently. 10. Functions and Modular Programming - Justification: Functions promote code reusability and better organization. Learning to write functions helps students break down complex problems into manageable pieces.</p> <ol> <li> <p>Introduction to Modules and Libraries - Justification: Python's strength lies in its extensive libraries. Teaching how to import and use modules like math or random expands the functionality available to students.</p> </li> <li> <p>Basic File Input/Output - Justification: Reading from and writing to files allows programs to handle data persistence. This is important for applications that need to save or load data.</p> </li> <li> <p>Error Handling with try and except - Justification: Errors are inevitable in programming. Learning to handle exceptions makes programs more robust and helps students debug their code effectively.</p> </li> <li> <p>Dictionaries and Sets - Justification: These data structures are useful for storing data in key-value pairs (dictionaries) and for handling unique items (sets). They broaden the ways students can manage data.</p> </li> <li> <p>Introduction to Object-Oriented Programming (OOP) - Justification: OOP introduces classes and objects, allowing for more complex and scalable code. A basic introduction prepares students for advanced programming concepts.</p> </li> <li> <p>Developing a Simple Project - Justification: Applying learned concepts in a project reinforces understanding. It provides practical experience and a sense of accomplishment.</p> </li> <li> <p>Review and Next Steps - Justification: Reviewing consolidates knowledge. Discussing next steps keeps students motivated to continue learning, possibly introducing topics like web development or data science with Python.</p> </li> </ol> <p>By following this progression, students build a strong foundation in Python programming. Each concept builds upon the previous ones, ensuring a smooth learning curve tailored for 9th-grade students.</p>"},{"location":"strategy/order-of-concepts/#with-visual-feedback","title":"With Visual Feedback","text":"<pre><code>Now assume that all students have access to the\ntrinket.io website that allows students to learn\nusing turtle graphics to get fast visual feedback.\nGenerate a list of the key Python concepts and the\norder they should be taught.\n</code></pre> <ol> <li>Introduction to Programming and Python</li> </ol> <p>Justification: Start by explaining what programming is and introduce Python as an accessible language for beginners due to its readability and simplicity. 2. Setting Up the Development Environment on Trinket.io</p> <p>Justification: Guide students on how to use Trinket.io for writing and running Python code, specifically leveraging its support for turtle graphics to provide immediate visual feedback. 3. Introduction to Turtle Graphics</p> <p>Justification: Begin coding with turtle graphics to engage students visually. Drawing simple shapes helps them understand basic programming concepts in an enjoyable way. 4. Basic Syntax and Turtle Commands</p> <p>Justification: Teach fundamental Python syntax through turtle commands like forward(), backward(), left(), and right(), which illustrate function calls and parameters. 5. Variables and Data Types</p> <p>Justification: Introduce variables to store values that control turtle movements (e.g., distances, angles). Cover basic data types like integers and floats in this context. 6. Loops with Turtle Graphics (for and while Loops)</p> <p>Justification: Use loops to create patterns and complex shapes, demonstrating iteration in a visually engaging manner. 7. Functions and Code Reusability</p> <p>Justification: Teach how to define functions to encapsulate code for drawing specific shapes or patterns, promoting modular programming and code reuse. 8. Conditional Statements (if, elif, else)</p> <p>Justification: Introduce decision-making by changing turtle behavior based on conditions (e.g., drawing different shapes based on user input). 9. User Input with input()</p> <p>Justification: Make programs interactive by allowing users to influence turtle drawings, enhancing engagement and understanding of input handling. 10. Lists and Data Collections - Justification: Teach lists by storing sequences of colors, movements, or shapes for the turtle to use, illustrating how to manage collections of data.</p> <ol> <li> <p>Randomness and the random Module - Justification: Use the random module to add unpredictability to turtle drawings, making programs more dynamic and fun.</p> </li> <li> <p>Advanced Turtle Graphics Techniques - Justification: Explore advanced features like setting pen size, colors, filling shapes, and using loops to create intricate designs.</p> </li> <li> <p>Error Handling with try and except - Justification: Introduce error handling to make programs more robust, especially when dealing with user input that affects turtle actions.</p> </li> <li> <p>Introduction to Object-Oriented Programming Concepts - Justification: Provide a basic understanding of objects and classes by explaining that the turtle itself is an object with methods and attributes.</p> </li> <li> <p>Basic File Input/Output (Optional based on Trinket.io capabilities) - Justification: If supported, teach how to read from and write to files to save or load data that influences turtle drawings.</p> </li> <li> <p>Developing a Comprehensive Turtle Graphics Project - Justification: Apply all learned concepts in a final project where students create their own complex drawing or simple animation, reinforcing their skills and creativity.</p> </li> <li> <p>Review and Next Steps - Justification: Summarize the key concepts covered and discuss how these skills can be applied to other areas of Python programming, encouraging continued learning.</p> </li> </ol> <p>By incorporating turtle graphics early and throughout the curriculum, students benefit from immediate visual feedback that enhances understanding and keeps them engaged. This progression builds foundational Python skills while leveraging the interactive capabilities of Trinket.io, providing a tailored and effective learning experience for 9th-grade students.</p> <p>```</p>"},{"location":"trinket/00-introduction/","title":"Introduction","text":""},{"location":"trinket/00-introduction/#introduction-to-turtle-graphics-with-trinket","title":"Introduction to Turtle Graphics with Trinket","text":"<p>These labs assume that you have internet access and a modern web browser such as Chrome.</p> <p>We use the Trinket web site because it a kid-safe place that has many of the basic turtle drawing libraries implemented in and easy-to-use web environment.  It is appropriate for students just getting started with python programming but has limited libraries for our advanced data analysis and plotting labs.  The free version is limited to the older Python 2.X functionality, but this meets all the needs of our beginning python class.</p> <p>If you want to try another web-based system that support turtle graphics and Python 3.X we suggest the web site repl.it.  Note that repl.it is not specifically designed for kids.</p>"},{"location":"trinket/00-introduction/#beginning-python-journey-map","title":"Beginning Python Journey Map","text":"<p> The map above is a visual guide to our Introduction to Python course.  Students start their journey in the upper left corner at the green start circle.  They then journey through each of the lessons until they reach the finish line.  Many of our courses give badges and laptop stickers for students that complete the journey from the start to the finish.</p>"},{"location":"trinket/00-introduction/#list-of-trinket-python-learning-labs","title":"List of Trinket Python Learning Labs","text":"<p>For students that are new to programming, here are some sample programs (what we call learning labs) that you can try.  You can learn by reading the sample programs, going to the Trinkit.io site and changing some values in the code.  Each of the labs has experiments at the end you can do to extend to see if you have mastered the concepts before you go on to the next lab.</p> <ol> <li>Trinket Account - introduction to the Turtle Graphs library with a list of drawing functions</li> <li>Turtle graphics - introduction to the Turtle Graphs library with a list of drawing functions</li> <li>Simple square - draw a square by moving and turning right four times</li> <li>Variables - add variables for the move edge distance and angle</li> <li>Loops - add a loop to make our code smaller</li> <li>Conditionals - add an if statement to change the color</li> <li>Functions - create a shape function</li> <li>Function parameters - add parameters to our function</li> <li>Random - generate random numbers that are used do drive the turtle</li> <li>Lists - store a list of colors</li> <li>Inputs - get some input from the user</li> <li>Recursion - create a function that calls itself to draw a tree</li> <li>Shapes - creating a separate module to draw shapes</li> <li>Color picker - picking different colors</li> <li>Sine wave - creating a sine wave</li> <li>Changing Background - changing background image and capturing keyboard </li> <li>Controlling MouseClicks - Tracking mouse clicks</li> </ol>"},{"location":"trinket/01a-trinket-account/","title":"Getting Starts With Trinket","text":"<p>These labs assume that you have internet access and a modern web browser such as Chrome.</p> <p>We use the Trinket web site because it a kid-save place that has many of the basic turtle drawing libraries implemented in and easy-to-use web environment.  It is appropriate for students just getting started with python programming but has limited libraries for our advanced data analysis and plotting labs.  The free version is limited to the older Python 2.X functionality, but this meets all the needs of our beginning python class.</p>"},{"location":"trinket/01a-trinket-account/#what-can-you-do-on-trinket","title":"What can you do on Trinket?","text":"<ol> <li>You can save programs</li> <li>You can rename programs</li> <li>You can create folders of programs</li> <li>You can run your program</li> <li>You can make the program fill the screen (fullscreen)</li> <li>Download your Python code</li> </ol>"},{"location":"trinket/01b-turtle-graphics/","title":"Turtle Graphics","text":""},{"location":"trinket/01b-turtle-graphics/#what-is-the-turtle-graphics-library","title":"What is the turtle graphics library?","text":"<p>Turtle graphs have been around for almost 50 years.  A turtle is a drawing object that has position, direction, and a pen to draw as it moves around a grid.  Turtle graphics are the preferred way to teach many concepts in computer science because they give you fast feedback.  Fast feedback allows you to quickly see the errors in your code and correct them.</p> <p>For many of our introductory python labs, we will use the turtle python library.  Although there are many different versions of the turtle library, most of the commands are similar.  What you learn with the trinket python system will be useful in other systems also.</p>"},{"location":"trinket/01b-turtle-graphics/#initialization-commands","title":"Initialization commands","text":"<p>There are three lines that will appear at the top of these labs:</p> <p><pre><code>import turtle\nt = turtle.Turtle()\nt.shape('turtle')\n</code></pre> The first line loads the turtle library into our program.  The second creates a new turtle object called \"t\".  The third line sets the shape to be a turtle.  You don't have to use the name \"t\".  You can set your turtle's name to be whatever you want.  For example you can call your turtle \"sue\".  </p> <p><pre><code>import turtle\nsue = turtle.Turtle()\nsue.shape('turtle')\n</code></pre> Just make sure you change all the names in the file to reference your new name.</p>"},{"location":"trinket/01b-turtle-graphics/#moving-the-turtle","title":"Moving the Turtle","text":"<p>There are five ways to move your turtle around the screen.  Our screen is around 400 points wide and 400 points high.  The point (0,0) is at the center of our screen.  The first four are relative movement commands.  The last one will move the turtle to the absolute x and y location.</p> <ul> <li>t.forward(40)</li> <li>t.back(40)</li> <li>t.left(90)</li> <li>t.right(90)</li> <li>t.goto(x,y)</li> </ul>"},{"location":"trinket/01b-turtle-graphics/#drawing","title":"Drawing","text":"<p>There are several ways to draw virtual \"ink\" on the screen.  The most common way is to just move your turtle around.  It will draw a thin black line by default, but you can also change the pen color and the width of drawing.</p> <ul> <li>t.penup() - no drawing will happen when the pen is up</li> <li>t.pendown() - drawing will occur on the screen when the turtle moves</li> <li>t.color('red') - set the pen to a specific color</li> <li>t.pensize(5) - set the width of the pen from 1 to 20.  5 is a good size.</li> <li>t.begin_fill() - begin filling a region you draw around</li> <li>t.end_fill() - end the fill region</li> </ul>"},{"location":"trinket/01b-turtle-graphics/#shapes","title":"Shapes","text":"<p>There are also a few built-in drawing functions.  The circle function that takes a single radius is an example of this. - t.circle(10)</p>"},{"location":"trinket/01b-turtle-graphics/#misc","title":"Misc","text":"<p>There are also a few other miscellaneous things you can do.  You can do some drawing and then clear the screen.</p> <ul> <li>t.clear() - clears the screen of all drawing</li> <li>t.hideturtle() - hides the turtle on the screen</li> </ul> <p>You can see a full list of the turtle commands here.  Just click on the turtle area and scroll down.</p>"},{"location":"trinket/01b-turtle-graphics/#generating-a-random-number","title":"Generating a random number","text":"<p>In addition to these drawing commands some of the exercises use random numbers.  Here is how we do this:</p> <p><pre><code>import random\n# get a random number between -200 and 200\nmyNumber = random.randint(-200, 200)\n</code></pre> This will generate a random number from -200 to 200.  You can use this number to randomly place items on the drawing canvas.</p> <p>Now, let's get started doing some fun drawing!</p>"},{"location":"trinket/02-simple-square/","title":"Turtle Square","text":""},{"location":"trinket/02-simple-square/#drawing-a-square","title":"Drawing a Square","text":"<p>The following code is an example of drawing a square using turtle graphics.  In this example the turtle moves forward 100 units and then turns right.  The angle for the right turn is 90 degrees.  It repeats these two functions four times to make a square.</p>"},{"location":"trinket/02-simple-square/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndan.forward(100)\ndan.right(90)\n\ndan.forward(100)\ndan.right(90)\n\ndan.forward(100)\ndan.right(90)\n\ndan.forward(100)\ndan.right(90)\n</code></pre>"},{"location":"trinket/02-simple-square/#drawing","title":"Drawing","text":""},{"location":"trinket/02-simple-square/#try-it-out","title":"Try it out","text":"<p>Here is a link to the Trinket web site with this program running: https://trinket.io/python/564899ffe9 You can click on this link and then press the Run button.  You should see the python code on the left side and the drawing on the right side of your screen.</p>"},{"location":"trinket/02-simple-square/#explanation","title":"Explanation","text":"<p>The first three lines will be the same for all our programs.  They import the turtle library into our program, create a new turtle object and then assign the turtle a shape icon.  Although almost all the turtle libraries work this way, there are some minor differences you will see in future examples.</p>"},{"location":"trinket/02-simple-square/#reorienting-your-turtle","title":"Reorienting your turtle","text":"<p>Note that at the start, the turtle is facing to the right.  After the last instruction, it is also facing to the right.  This is a common best practice so that the turtle gets reoriented after some drawing function.  If you remove the last right(90) function and run the program again you will see the turtle ends up facing upward.  But if you rerun the program you will still get the same square because the orientation of the turtle is not stored between runs.</p>"},{"location":"trinket/02-simple-square/#experiments","title":"Experiments","text":"<p>Can you change the distance and angle the turtle moves?  What happens when you change the numbers for the forward and right functions?  Can you go left as well as right?</p> <p>Can you add more motion commands using the copy and paste?</p>"},{"location":"trinket/03-variables/","title":"Variables","text":""},{"location":"trinket/03-variables/#using-variables","title":"Using Variables","text":"<p>In the simple square program we repeated the numbers for the distance and turning angle four times in four different places.  If we wanted to change the size of our box we would have to change the code in four different places.  By using variables we can make our program easier to change.</p> <p>In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees.  We will repeat this four times to complete a square.</p>"},{"location":"trinket/03-variables/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\n# let's just put these in one place to make our program easier to modify\ndistance = 50\nangle = 90\n\ndan.forward(distance)\ndan.right(angle)\n\ndan.forward(distance)\ndan.right(angle)\n\ndan.forward(distance)\ndan.right(angle)\n\ndan.forward(distance)\ndan.right(angle)\n\ndan.write('done with square')\n</code></pre> <p>Run Square With Variables</p>"},{"location":"trinket/03-variables/#experiments","title":"Experiments","text":"<p>Can you make the turtle draw a larger square?  Hint: change the forward(40) to be forward(100)</p>"},{"location":"trinket/04-loops/","title":"Loops","text":""},{"location":"trinket/04-loops/#using-a-loop","title":"Using a Loop","text":"<p>In this example program we will make the turtle go forward 40 steps and then make a right turn of 90 degrees. We will repeat this four times to complete a square.</p>"},{"location":"trinket/04-loops/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndistance = 50\nangle = 90\n\n# repeat the forward/right functions four times\nfor i in range(4):\n   dan.forward(distance)\n   dan.right(angle)\n\ndan.write('done with square')\n</code></pre>"},{"location":"trinket/04-loops/#running-the-example-on-trinket","title":"Running the Example on Trinket","text":"<p>Run Loop Program on Trinket</p>"},{"location":"trinket/04-loops/#experiments","title":"Experiments","text":"<ol> <li>Can you make the turtle draw a larger square?  Hint: change the distance to be 80.  How big can you make the square before the turtle goes off the screen?</li> <li>Can you make a hexagon?  This is a figure with six sides.  Hint: the angle will need to be 60 and the range limit will need to be 6.</li> <li>Can you make an octagon?  An Octagon has eight sides.  Hints: Try using an angle of 45.</li> <li>Can you make a stop sign?  You will need to use a dan.color('red'). a dan.beginfill() and a dan.endfill().  You can add the text of the word \"stop\" by using dan.moveto(x,y) and dan.write(\"STOP\",None,None, \"30pt bold\").  You can also use the dan.hideturtle() so that the outline of the turtle is not displayed at the end.  See: Python Stop Sign Tutorial</li> </ol>"},{"location":"trinket/04a-stop-sign/","title":"Python Turtle Graphics Stop Sign","text":"<p>In this lesson, we will use variables and for loop to draw a stop sign. We will also show how to use the penup, pendown, color, begin_fill, end_fill and write functions. Our write function will also change the font size using the <code>font=(\"Arial\", 30, \"normal\")</code> parameter.</p>"},{"location":"trinket/04a-stop-sign/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndistance = 50\nsides = 8\n# The angle we turn is related to the number of sides by this formula\nangle = 360 / sides\nmy_color = \"red\"\n\ndan.penup()\ndan.goto(-50, 100)\ndan.pendown()\ndan.color(my_color)\ndan.begin_fill()\n# repeat the forward/right functions for each side\nfor i in range(sides):\n   dan.forward(distance)\n   dan.right(angle)\n\ndan.end_fill()\ndan.hideturtle()\n\ndan.penup()\ndan.right(110)\ndan.forward(80)\ndan.color('white')\ndan.write('STOP', font=(\"Arial\", 30, \"normal\"))\n</code></pre>"},{"location":"trinket/04a-stop-sign/#link-to-trinket","title":"Link to Trinket","text":"<p>Draw a Stop Sign on Trinket</p>"},{"location":"trinket/05-conditionals/","title":"Conditional","text":""},{"location":"trinket/05-conditionals/#conditionals","title":"Conditionals","text":"<p>In this example program we will make the turtle draw different sides of the square using different colors.</p> <p>There are two things we do with equations in Python.  The first is to use the equal sign to assign values on the left side of the equal sign to the values on the right side.  The second thing we do is to compare values to the left and right of an operator.  The result of a comparison is always TRUE or FALSE.</p> <p>Here is the basic syntax of the Python conditional operator.</p> <pre><code>if (i &gt; 2):\n   # do something if i is greater than 2\nelse:\n   # do something else when i is exactly 2 or less than 2\n</code></pre>"},{"location":"trinket/05-conditionals/#simple-conditionals","title":"Simple Conditionals","text":"<p>Here is a program that </p> <pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndistance = 100\nangle = 90\n\nfor i in range(1, 5):\n   # i modulo 2 is the remainder after we divide by 2\n   dan.write(i, font=(\"arial\", 16, \"normal\"))\n   if i &gt; 2: # true if i greater than 2\n      dan.color('red')\n      dan.pensize(5)\n   else: # if i is exactly 2 or less than 2\n      dan.color('blue')\n      dan.pensize(3)\n   dan.forward(distance)\n   dan.right(angle)\n</code></pre> <p>Link to Trinket with Simple Conditional</p>"},{"location":"trinket/05-conditionals/#changing-odd-and-even-edge-colors","title":"Changing Odd and Even Edge Colors","text":"<p>We would like every other side to change color.  To do this we will add an if-then-else block of code to our example program.  This block of code is called a conditional block.  The condition is an expression that evaluates to be either TRUE for FALSE.  In our example we will test to see if the index of our loop (the letter \"i\") is ODD or EVEN.  We can do this by looking at the remainder after we divide by 2.  Python has a handy operator called the modulo operator that uses the percent character which is above the number five on your keyboard.  The test for ODD or EVEN is this:</p> <pre><code>i % 2\n</code></pre> <p>In our previous loop lesson, we created an index that started at 1 and then changed to 2, 3 and finally 4.  For 1 and 3, the first and third edges the result of divide by 2 will return 1 which is the same as TRUE.  For 2 and 4 (the vertical sides of the square), the expression will evaluate to 0 since the remainder of 2/2 and 4/2 is zero. </p> <pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndistance = 50\nangle = 90\n\n# repeat the forward/right functions four times\nfor i in range(4):\n   if i % 2:  # This is equivalent to if (i % 2) == 0: (true for odd numbers)\n      dan.color('red')\n   else: # if i is even\n      dan.color('blue')\n   dan.forward(distance)\n   dan.right(angle)\n\ndan.write('done with square')\n</code></pre> <p>Conditional Square</p> <p>Can you make the turtle use a larger pen size?  Try dan.pensize(10) for the red and dan.pensize(3) for the blue.</p>"},{"location":"trinket/05-conditionals/#experiments","title":"Experiments","text":"<ol> <li>Can you change the width of the pen with the dan.penwidth(20) function?</li> <li>Show i <pre><code>for i in range(4):\n    dan.write(i ,None,None, \"16pt bold\")\n    if i % 2:\n      dan.color('red')\n   else:\n      dan.color('blue')\n   dan.forward(distance)\n   dan.right(angle)\n</code></pre></li> </ol>"},{"location":"trinket/06-functions/","title":"Functions","text":""},{"location":"trinket/06-functions/#functions","title":"Functions","text":"<p>Now we will create a new function that will draw each side.</p>"},{"location":"trinket/06-functions/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndistance = 50\nangle = 90\n\ndef side():\n   # if event then red 2, 4 etc.\n   if i % 2:\n      dan.color('red')\n   # else if odd then draw blue 1, 3 etc.\n   else:\n      dan.color('blue')\n   dan.forward(distance)\n   dan.right(angle)\n\n# repeat the forward/right functions four times\nfor i in range(4):\n   side()\n\ndan.write('done with square')\n</code></pre>"},{"location":"trinket/06-functions/#run-the-example-on-trinket","title":"Run the Example on Trinket","text":"<p>Run the Functions Program on Trinket</p>"},{"location":"trinket/06-functions/#experiments","title":"Experiments","text":"<p>Can you change the name of the function to be \"petal\"?</p>"},{"location":"trinket/07-flower/","title":"Flower","text":""},{"location":"trinket/07-flower/#flower","title":"Flower","text":"<p>Now we will create a new function that will draw a triangle for each side.  It will do this by going forward and right three times at an angle of 120 degrees.  We will put that triangle into a function called petal.  We will then call that function four times. At the end we will draw the stem.  To make the stem wider we will change the pen size.</p>"},{"location":"trinket/07-flower/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndistance = 100\nangle = 120\n\ndef petal():\n   if i % 2:\n      dan.color('green')\n   else:\n      dan.color('lightgreen')\n   dan.left(30)\n   # draw a triangle and fill in the color\n   dan.begin_fill()\n   dan.forward(distance)\n   dan.right(angle)\n   dan.forward(distance)\n   dan.right(angle)\n   dan.forward(distance)\n   dan.end_fill()\n   dan.left(angle)\n\n# start off 45 right\ndan.right(45)\n# repeat the forward/right functions four times\nfor i in range(4):\n   petal()\n# now draw the stem\ndan.pensize(10)\ndan.right(45)\ndan.forward(200)\n\ndan.write('done with flower')\n</code></pre>"},{"location":"trinket/07-flower/#drawing","title":"Drawing","text":""},{"location":"trinket/07-flower/#run-the-example-on-trinket","title":"Run the Example on Trinket","text":"<p>Run the Flower Example on Trinket</p>"},{"location":"trinket/07-flower/#experiments","title":"Experiments","text":"<ol> <li>Can you change the colors of the petals?</li> <li>Can you change the width of the stem of the flower using the pensize() function?</li> <li>Can you change the size of the petals?</li> <li>Can you change the number of petals?  Why is this problem harder?  What assumptions did the original author of the program make?</li> </ol>"},{"location":"trinket/07-function-parameters/","title":"Function Parameters","text":""},{"location":"trinket/07-function-parameters/#lesson-objective","title":"Lesson Objective","text":"<p>Now we will create a new function that draw a square with a specific color at a specific x and y point.  The function will take three inputs: - the color - the horizontal x position on the grid - the vertical y position on the grid</p>"},{"location":"trinket/07-function-parameters/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n\nsize = 40\nangle = 90\n\ndef square(myColor, x, y):\n   dan.color(myColor)\n   dan.penup()\n   dan.goto(x, y)\n   dan.pendown()\n   for i in range(4):\n      dan.forward(size)\n      dan.right(angle)\n\n\nsquare('red', -50, 80)\nsquare('orange', 50, 70)\nsquare('green', -50, -20)\nsquare('blue', 70, -50)\n</code></pre>"},{"location":"trinket/07-function-parameters/#drawing","title":"Drawing","text":"<p>Link to Function in Trinket</p>"},{"location":"trinket/07-function-parameters/#experiments","title":"Experiments","text":"<ol> <li>Can you change the name of the function to be \"petal\"?</li> <li>Can you change the function to include the ability to pass in one color for the border, and one color for the center fill? Sample of Border Square Program</li> </ol>"},{"location":"trinket/08-list/","title":"Lists","text":""},{"location":"trinket/08-list/#python-list","title":"Python List","text":"<p>How would we create and access a list of colors in Python? Here is a list of colors:</p> <p><pre><code>colorList = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'pink', 'brown', 'gray', 'gold']\n</code></pre> To access any color you can reference the index of the color by using a number.  For example to get the third color you would use:</p> <pre><code>colorList[2]\n</code></pre>"},{"location":"trinket/08-list/#sample-code-to-draw-a-circle-with-a-color-index","title":"Sample Code to Draw A Circle with a Color Index","text":"<pre><code>import turtle\nimport random\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ncolorList = ['red', 'orange', 'yellow', 'green', 'blue',\n  'purple', 'pink', 'brown', 'gray', 'gold']\n\ndan.begin_fill()\ndan.color(colorList[3])\ndan.circle(20)\ndan.end_fill()\n</code></pre>"},{"location":"trinket/08-list/#iterating-over-many-colors","title":"Iterating over many colors","text":"<pre><code>import turtle\nimport random\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ncolor_list = ['red', 'orange', 'yellow', 'green', 'blue',\n  'purple', 'pink', 'brown', 'gray', 'gold', 'cyan', 'Gainsboro', 'gray',\n  'dimgray', 'LightSlateGray','AliceBlue', 'LimeGreen', 'DarkKhaki', 'Khaki']\n\ndan.penup()\ndan.goto(-180, 160)\ndan.begin_fill()\nfor myColor in color_list:\n  dan.color(myColor)\n  dan.pendown()\n  dan.begin_fill()\n  dan.circle(10)\n  dan.end_fill()\n  dan.penup()\n  dan.forward(20)\ndan.hideturtle()\n</code></pre>"},{"location":"trinket/08-list/#drawing","title":"Drawing","text":""},{"location":"trinket/08-list/#run-sample-program-on-trinket","title":"Run Sample Program on Trinket","text":"<p>Draw a Green Circle Using List</p>"},{"location":"trinket/08-list/#experiments","title":"Experiments","text":"<ol> <li>Can you change the name of the function to be \"petal\"?</li> <li>What does <code>print(len(colorList))</code> return?</li> <li>Go to the Trinket colors page and see the name of other colors you can use.</li> <li>What happens if a list does not fit on a single line? Can a list span multiple lines?</li> <li>Can you use double quotes and single quotes in the same list?</li> </ol>"},{"location":"trinket/08-random/","title":"Random Numbers","text":""},{"location":"trinket/08-random/#random-circles","title":"Random Circles","text":"<p>In this exercise we will draw 10 random circles on the screen.  We will use the random function randint(min, max) that will generate a random number between the minimum and maximum values.  Since we are drawing on a grid that goes from -200 to 200 here is the random function:</p> <p><pre><code>myNumber = random.randint(-200, 200)\n</code></pre> After this line runs, the variable myNumber will be assigned some random number between -200 and 200.   We will then use this number to go to that location before we draw a circle.</p>"},{"location":"trinket/08-random/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\nimport random\n# this is a list of colors\ncolorList = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'pink', 'brown', 'gray', 'gold']\ndan = turtle.Turtle()\ndan.shape('turtle')\n\n# draw a circle at a random location on the screen\nfor i in range(10):\n   x = random.randint(-200, 200)\n   y = random.randint(-200, 200)\n   dan.goto(x,y)\n   # pick a random color from the colorList by getting a random index from 0 to 9\n   dan.color(colorList[random.randint(0,9)])\n   # draw a circle with radius of 7 units\n   dan.begin_fill()\n   dan.circle(7)\n   dan.end_fill()\n\ndan.goto(0,0)\n</code></pre>"},{"location":"trinket/08-random/#drawing","title":"Drawing","text":""},{"location":"trinket/08-random/#run-the-example-on-trinket","title":"Run the Example on Trinket","text":"<p>Run the Random Example on Trinket</p>"},{"location":"trinket/08-random/#experiments","title":"Experiments","text":"<ol> <li>Can you create a variable that is used to control the distance from the origin to wander?  Right now the distance is set to be 200 on each extent.</li> <li>Can you create a variable for the number of circles to draw?</li> <li>Go to the Trinket colors page and see the name of other colors you can use.  Note that you can use any of these colors in your lists.</li> <li>Right now, all the circles are 7 pixels in size.  Can you make the circles have a random size from 3 to 20?</li> </ol>"},{"location":"trinket/08b-random-stars/","title":"Random Stars","text":""},{"location":"trinket/08b-random-stars/#random-circles","title":"Random Circles","text":"<p>In this exercise we will draw 5 stars of different colors: The colors are randomly picked from the list of colors <pre><code>colorList = ['red', 'orange', 'green', 'blue', 'purple', 'pink', 'brown', 'gray', 'gold']\nmycolor = colorList[random.randint(0,len(colorList)-1)]\n</code></pre> After these line runs, the variable mycolor will be assigned some random color from the list of colors myColorList.   We will then use this color to fill a star. The stars are drawn at random locations selected in  x = random.randint(-max_distance, max_distance)    y = random.randint(-max_distance, max_distance)    The size of star is also randomly picked size = random.randint(15, 30)</p>"},{"location":"trinket/08b-random-stars/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\nimport random\n# this is a list of colors\ncolorList = ['red', 'orange', 'green', 'blue', 'purple', 'pink', 'brown', 'gray', 'gold']\ndan = turtle.Turtle()\ndan.shape('turtle')\ndan.delay(1)\ndan.clear()\ndan.penup()\n\nmax_distance = 160\n\n# draw an eight sided star\ndef star(x, y, size, color):\n  dan.goto(x, y)\n  dan.color(colorList[random.randint(0,len(colorList)-1)])\n  dan.pendown()\n  dan.begin_fill()\n  for i in range(1,8):\n     dan.forward(size)\n     dan.right(150)\n     dan.forward(size)\n     dan.left(100)\n  dan.end_fill()\n  dan.right(10)\n  dan.penup()\n\n# draw a pattern at a random location on the screen\nfor i in range(5):\n   x = random.randint(-max_distance, max_distance)\n   y = random.randint(-max_distance, max_distance)\n   size = random.randint(15, 30)\n   color_index = random.randint(0,8)\n   # draw a star with size and color\n   star(x,y,size, color_index)\n\n# hide so we have a nice drawing\ndan.hideturtle()\n</code></pre>"},{"location":"trinket/08b-random-stars/#experiments","title":"Experiments","text":"<ol> <li>Can you create a variable for the number of circles to draw?</li> <li>Go to the Trinket colors page and see the name of other colors you can use.  Note that you can use any of these colors in your lists.</li> </ol>"},{"location":"trinket/08c-turtle-shapes/","title":"Change the Turtle Shape","text":"<p>With the turtle shape() method we can change your turtle shape to be any of the following shapes</p> <ol> <li>arrow</li> <li>turtle</li> <li>circle</li> <li>square</li> <li>triangle</li> <li>classic</li> </ol> <pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('square')\n</code></pre> <p>The <code>classic</code> shape is a small arrow.</p>"},{"location":"trinket/08c-turtle-shapes/#using-a-list-of-shapes","title":"Using a List of Shapes","text":"<p>What if we want to use a list of shapes?</p> <pre><code>import turtle, time\ndan = turtle.Turtle()\n\nmyList = [\"square\", \"circle\", 'triangle', 'arrow', 'classic', 'turtle']\n\nfor index in range(0, len(myList)):\n  dan.shape(myList[index])\n  time.sleep(1)\n</code></pre> <pre><code>import turtle, time\ndan = turtle.Turtle()\n\nmyList = [\"square\", \"circle\", 'triangle', 'arrow', 'classic', 'turtle']\n\nfor myShape in myList:\n  dan.shape(myShape)\n  time.sleep(1)\n</code></pre>"},{"location":"trinket/08c-turtle-shapes/#sample-program","title":"Sample program","text":"<p>Sample</p>"},{"location":"trinket/08c-turtle-shapes/#experiments","title":"Experiments","text":"<p>Can you use the new shapes to draw a star or any other shape of your chosing</p>"},{"location":"trinket/11-input/","title":"Getting Inputs from the User","text":"<p>We can prompt the user to supply a number using the input() function.</p> <pre><code>import turtle\nimport random\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ncolorList = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'pink', 'brown', 'gray', 'gold']\n\ncolorIndexInt = 0\n\nwhile colorIndexInt &gt; -1:\n   colorIndexString = input(\"Enter a number from 0 to 9 to set the new color:\")\n   colorIndexInt = int(colorIndexString)\n   dan.begin_fill()\n   dan.color(colorList[colorIndexInt])\n   dan.circle(20)\n   dan.end_fill()\n\ndan.write('done!')\n</code></pre>"},{"location":"trinket/11-input/#example-on-trinket","title":"Example on Trinket","text":"<p>Run the Input Example on Trinket</p>"},{"location":"trinket/11-input/#experiments","title":"Experiments","text":"<ol> <li>Write a program that will prompt the user to enter the number of shapes to draw, the size of the shapes, the color of the shapes and the range of the screen to draw them (50 to 200).</li> <li>Add some additional code to check the range of your expected values.  If the input is out of range, then continue to prompt the user to enter the correct number until they get a valid number.  Use a <code>while</code> statement to continue prompting.</li> </ol>"},{"location":"trinket/12-recursion/","title":"Recursion","text":""},{"location":"trinket/12-recursion/#recursion","title":"Recursion","text":"<p>Recursion is when we write a function that calls itself.  It usually passes a parameter that changes and when it hits a limit it stops going.  This lab does a lot of drawing so to speed it up we will disable the turtle motion.</p> <p>Our recursive function is the draw_branch function.  It will draw a single branch and then call itself two times at its tip to draw two more smaller branches.</p>"},{"location":"trinket/12-recursion/#sample-code","title":"Sample Code","text":"<pre><code>import turtle\n\ncolorList = ['red', 'orange', 'green', 'blue', 'indigo', 'violet', 'brown']\n\ndef draw_branch(turtle, color, size, level):\n  if level &gt; 1:\n    turtle.pendown()\n    turtle.color(color)\n    turtle.forward(size)\n    turtle.right(20)\n    # draw three branches at half length with a branch on the tip of each branch \n    for i in range(0, 3):\n       turtle.forward(size/2)\n       draw_branch(turtle, colorList[i], size/2, level - 1)\n       turtle.backward(size/2)\n       turtle.left(20)\n    turtle.right(40)\n    turtle.backward(size)\n\nmyTurtle = turtle.Turtle()\nmyTurtle.shape(\"turtle\")\nmyTurtle.speed(50)\n\nlength = 150\nnumberPetals = 6\nmyTurtle.penup()\n# move to the bottom center\nmyTurtle.goto(0, -200)\nmyTurtle.left(90)\n\ndraw_branch(myTurtle, colorList[0], length, 4)\n</code></pre>"},{"location":"trinket/12-recursion/#drawing","title":"Drawing","text":""},{"location":"trinket/12-recursion/#run-sample-program-on-trinket","title":"Run Sample Program on Trinket","text":"<p>Run Recursion Program on Trinket</p>"},{"location":"trinket/12-recursion/#explanation","title":"Explanation","text":"<p>The first three lines will be the same for all our programs.  They import the turtle library into our program, create a new turtle object and then assign the turtle a shape icon.</p> <p>Note that at the start, the turtle is facing to the right.  After the last instruction, it is also facing to the right.</p>"},{"location":"trinket/12-recursion/#experiments","title":"Experiments","text":"<p>Can you change the distance and angle the turtle moves?  What happens when you change the numbers for the forward and right functions?  Can you go left as well as right?</p> <p>Can you add more motion commands using copy and paste?</p>"},{"location":"trinket/13-shape-module/","title":"Shape Module","text":""},{"location":"trinket/13-shape-module/#shape-module","title":"Shape Module","text":"<p>In this lab we will create a set of drawing function and put them together into a new file.  We will then import this file into our main.py file.</p> <p>Example code to import the module in main.py <pre><code>import turtle\nfrom shape import *\ndan = turtle.Turtle()\ndan.shape('turtle')\n\ndraw_triangle(dan, 'red', 5, 20, 30)\n\ndraw_circle(dan, 'orange', 10, 0, 30)\n\ndraw_square(dan, 'orange', 15, -20, 30)\n</code></pre></p>"},{"location":"trinket/13-shape-module/#sample-codeimited-t","title":"Sample Codeimited t","text":"<pre><code># This is a custom module we've made.  \n# Modules are files full of code that you can import into your programs.\n# This one teaches our turtle to draw various shapes.\n\nimport turtle\n\ndef draw_circle(turtle, color, size, x, y):\n  turtle.penup()\n  turtle.color(color)\n  turtle.fillcolor(color)\n  turtle.goto(x,y)\n  turtle.pendown()\n  turtle.begin_fill()\n  turtle.circle(size)\n  turtle.end_fill()\n\ndef draw_triangle(turtle, color, size, x, y):\n  turtle.penup()\n  turtle.color(color)\n  turtle.fillcolor(color)\n  turtle.goto(x,y)\n  turtle.pendown()\n  turtle.begin_fill()\n  for i in range (3):\n    turtle.forward(size*3)\n    turtle.left(120)\n  turtle.end_fill()\n  turtle.setheading(0)\n\ndef draw_square(turtle, color, size, x, y):\n  turtle.penup()\n  turtle.color(color)\n  turtle.fillcolor(color)\n  turtle.goto(x,y)\n  turtle.pendown()\n  turtle.begin_fill()\n  for i in range (4):\n    turtle.forward(size*2)\n    turtle.left(90)\n  turtle.end_fill()\n  turtle.setheading(0)\n\ndef draw_star(turtle, color, size, x, y):\n  turtle.penup()\n  turtle.color(color)\n  turtle.fillcolor(color)\n  turtle.goto(x,y)\n  turtle.pendown()\n  turtle.begin_fill()\n  turtle.right(144)\n  for i in range(5):\n    turtle.forward(size*2)\n    turtle.right(144)\n    turtle.forward(size*2)\n  turtle.end_fill()\n  turtle.setheading(0)\n</code></pre>"},{"location":"trinket/13-shape-module/#sample-program","title":"Sample Program","text":"<p>Sample</p>"},{"location":"trinket/13-shape-module/#experiments","title":"Experiments","text":"<p>Can you add a new shape called \"flower\"?</p>"},{"location":"trinket/14-color-picker/","title":"Color Picker","text":""},{"location":"trinket/14-color-picker/#color-picker","title":"Color Picker","text":"<p>You are not limited to the colors by name Trinket Colors. You can use Hex and RGB values and let your imagination run wild.</p> <p>Color Picker</p>"},{"location":"trinket/14-color-picker/#example-code","title":"Example code","text":"<pre><code>import turtle\n\n#turtle.setup(400,500)\nwn = turtle.Screen()\nwn.setup(400,500)\n#turtle.title(\"Tess becomes a traffic light!\")\nwn.bgcolor(\"A7E30E\")\ntess = turtle.Turtle()\ntess.color('#FA057F')\nstyle = ('Arial', 40, 'bold')\ntess.write('Hello', font=style, align='Center')\ntess.hideturtle()\n</code></pre>"},{"location":"trinket/14-color-picker/#experiments","title":"Experiments","text":"<p>Can you try different colors?  Can you change font properties in style object?</p> <p>The font name can as 'Arial', 'Courier', or 'Times New Roman' The font size in pixels. The font type, which can be 'normal', 'bold', or 'italic'</p>"},{"location":"trinket/15-sine-wave/","title":"Sine Wave","text":"<p>We can also use turtle graphics to do math function plots.</p> <p>Here is an example of plotting a sine function with turtle goto() functions.  We calculate the new vertical value with the following function:</p> <pre><code>y = math.sin(math.radians(x))\ndan.goto(x, y * 80)\n</code></pre> <p>And we loop through about 400 values from -200 to 200.  We use the radians() function to convert the numbers into a a number that will give us a single sine in the X range.</p> <pre><code>import turtle\ndan = turtle.Turtle()\ndan.shape('turtle')\n# needed for the sin function\nimport math\n\ndan.penup()\ndan.goto(-200, 28)\ndan.color('blue')\ndan.pensize(3)\ndan.pendown()\nfor x in range(-200, 200):\n    y = math.sin(math.radians(x))\n    dan.goto(x, y * 80)\n</code></pre> <p>Here is the output of this function:</p> <p></p>"},{"location":"trinket/15-sine-wave/#link-to-working-trinket-program","title":"Link to Working Trinket Program","text":"<p>Link to Turle Sine Wave</p>"},{"location":"trinket/16-changing-background/","title":"Changing background","text":""},{"location":"trinket/16-changing-background/#changing-background-and-using-keys-to-move-the-rocket","title":"Changing background and using keys to move the rocket","text":"<p>We can use trinkets to change the background and change the shape of the turtle with a custom image. Also we can control the screen with the mouse. It gives a starting point for how to create a game.</p> <p>The following blog lays out the steps for creating a rocket ship https://blog.trinket.io/using-images-in-turtle-programs/</p> <p>The images have to be the same size as the the screen size. Here are some other images that have been resized.</p>"},{"location":"trinket/16-changing-background/#background","title":"Background","text":""},{"location":"trinket/16-changing-background/#rocketpanda","title":"Rocketpanda","text":""},{"location":"trinket/16-changing-background/#sample-program","title":"Sample Program","text":"<p>Sample</p>"},{"location":"trinket/16-changing-background/#experiments","title":"Experiments","text":"<ol> <li>Can you map another keyboard key to take some other actions like jump, draw a circle.</li> <li>Use different images and create backgrounds of your choice, like rocketpanda gliding through night sky</li> </ol>"},{"location":"trinket/17-controlling-mouseclicks/","title":"Controlling mouseclicks","text":""},{"location":"trinket/17-controlling-mouseclicks/#getting-a-handle-of-the-mouse-clicks","title":"Getting a handle of the mouse clicks","text":"<p>We can use trinkets to change the background and control mouse clicks. Also we have access to the exact position where the mouse was clicked. That creates a lot of possibilities  for creating different interactions with the screen. </p> <p>Code to change screen color</p> <p>Code to get co-ordinates of mouse click <pre><code>        x=turtle.xcor()\n        y=turtle.ycor()\n</code></pre></p> <p>Here is an example of setting the screen color. We then draw a square in the center of the screen.  When the user clicks a circle is drawn within the circle. On next click the circle increases in diameter. When the circle touches the square, it stops increaing in size. </p> <p>If the user clicks the screen outside the square the screen is refreshed </p> <pre><code>#import packages\nimport turtle\nimport random\n\n# global colors\ncol = [ 'yellow', 'green', 'blue',\n       'white', 'orange', 'pink']\ncirclecol =   [ 'red', 'magenta', 'purple',\n       'black', 'brown', 'turqouise' ]\n# method to call on screen click\ntina = turtle.Turtle()  \ncirclediameter=10\nsquaresize = 200\n\ndef drawCircleOnMouseClick(x, y):\n    global circlecol\n    global circlediameter\n    print(\" x={}, y={}\".format(x,y)) \n\n    ##If mouse is clicked within square increase size, if mouse clicked outside reset screen\n    if (isMouseClickWithinSquare(x,y)) :\n    ## Check if diameter is same size as square\n      if (circlediameter &lt;= squaresize/2):\n          print(\" circlediameter={}, squaresize={}\".format(circlediameter,squaresize))\n    ##If yes do not increase the size else increase the size\n          circlediameter += 10\n##If mouse is clicked outside the square, reset the screen - draw a new square  \n    else:\n        screenreset()\n\n\n    draw_circle(tina, circlediameter, getCircleColor() )\n\ndef getBgColor():\n    ind = random.randint(0, 5)\n    return col[ind] \n\ndef getCircleColor():\n    ind = random.randint(0, 5)\n    return circlecol[ind]\n\ndef drawsquare(turtle, size, color, startx, starty):\n    turtle.penup()\n    turtle.goto(startx, starty)\n    turtle.pendown()\n    turtle.fillcolor(color)\n    turtle.color(color)\n    turtle.begin_fill()\n    for i in range(4):\n        turtle.forward(size)\n        turtle.left(90)\n    turtle.end_fill() \n\ndef draw_circle(turtle, diameter, color):\n    turtle.penup()\n    turtle.goto(0, -diameter)\n    turtle.pendown()\n    turtle.fillcolor(color)\n    turtle.color(color)\n    turtle.begin_fill()\n    turtle.circle(diameter)\n    turtle.end_fill() \n\ndef screenreset():\n    tina.reset()\n    drawsquare(tina, squaresize, getBgColor(), -100, -100 )\n\ndef isMouseClickWithinSquare(x, y):\n  return (x &gt;= -100 and x &lt;= 100 and y &gt;= -100 and y &lt;= 100)\n# set screen\nsc = turtle.Screen()\nsc.setup(400, 400)\nsc.bgcolor('skyblue')\nscreenreset()\n\n##Screen can respond to mouseclick and we can tell it what action to take i.e. method to call\n\n\n# call method on screen click\nsc.onscreenclick(drawCircleOnMouseClick)\n</code></pre>"},{"location":"trinket/17-controlling-mouseclicks/#sample-program","title":"Sample Program","text":"<p>Sample</p>"},{"location":"trinket/17-controlling-mouseclicks/#experiments","title":"Experiments","text":"<ol> <li>Can you draw different shapes</li> <li>Can you add some more colors in the arrays</li> <li>Can you change background color of the screen</li> <li>Can you try some other events</li> </ol>"},{"location":"trinket/examples/","title":"Trinket Examples","text":"<ol> <li>Bullseye Dart Game</li> <li>Tic Tac Toe Game</li> <li>How to Find Prime Numbers?</li> <li>Drawing an Elephant</li> </ol> <p>Use the Turtle API documentation to check out what else is available.</p>"}]}